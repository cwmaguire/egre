┏━━━━━━━━━━━━━━━━┓
┃   2024-03-19   ┃
┗━━━━━━━━━━━━━━━━┛

I don't know that I ever had a _great_ reason for doing a graph rules engine.
In fact, I don't think I thought about it as a "rules engine" for quite some
time. I only named it a "graph of stream handlers" after I had already named it
"erlmud". So the idea of it being a rules engine has only gradually emerged.
Hmm, I think the original idea was that the objects would manage events
themselves: each object in the MUD was an equal participant: no processes would
have control over other processes.

Yeah, that resonates. I think my original idea may just have been to
create a mesh of cooperative, independent nodes. Each MUD object was
a discrete, independent unit.

I remember thinking about walking on sand at the beach. (It doesn't matter
that it was at the beach, but I *was* thinking about walking on sand
particularly at the beach. I live in a beach town.) When I step on the
top layer of sand grains, there's no "manager" object in reality that
stops the world and communicates or regulates the interaction with all
of the top layer of grains and the grains that they touch. Each individual
grain of sand, by virtue of its nature, pushes against other grains of sand.
This continues until the energy from stepping down has been distributed
throughout enough grains of sand that's it's disipated in movement and
other energy transfer (sound, heat?).

So, this was never about making a rules engine, it was about making a MUD
out of autonomous pieces that don't control each other. It was about _not_
having management. I think it was more about pure OO: each MUD element
is a separate little computer, like a grain of sand, and all those little
computers, like the grains of sand, communicates with its neighbour.

So, it's a mesh network rules engine. Time for a rename! lol.
"Mesh Network Rules Engine" - MNRE
"Rules Engine Mesh Network" - REMN

Wiipedia talks about mesh networks as nodes that can self-organize in
order to route information. That's not what this is. A MUD expresses
the topology and the MUD rules control the movement of elements. That is,
a ring can move from a hand to the ground, but the ring isn't "self-organizing".
Or, the ring at least isn't self-organizing (because the ring itself
could cause it to be dropped on the ground) for the purpose of communication.
The ring is just finding a steady state where all rules are satisfied, such
that no rule is kicking off any more events.

So, EGRE is a graph of independent nodes that seeks a steady state upon
being perturbed by events.

What I'm doing seems to match https://en.wikipedia.org/wiki/Reactive_programming

┏━━━━━━━━━━━━━━━━┓
┃   2024-03-18   ┃
┗━━━━━━━━━━━━━━━━┛

I can't remember why I started this MUD the way I did, back in 2015-01-25.
I know I have videos on YouTube mentioning the concurrency, but why
one process per object.

  It might have just been for fun. Erlang is built to have many, many
  processes, so maybe I just thought it would be cool to build a MUD
  where every object had its own process.

  Is there a reason why I couldn't create this MUD with objects as data
  and all the rules baked into less modules? e.g. an "attack" module.

  Well, for one thing I couldn't load in new rules while the MUD was
  running without updating all the modules that required changes.
  With this model I could add a new handler module at any time just by
  doing l(new_module) in the shell and then adding it to the list
  of handlers for any object.

  Other than that, I don't see how it would be difficult, let alone
  _more_ difficult, to have logic for anything I could do with a rules
  engine. About the only issue would be having massive modules holding
  all the rules; can Icome up with any example where multiple different
  situations can effect an outcome? e.g. you want to do something like pick
  a lock and there's an unlimited number of states that could affect the
  outcome:
  - weather
  - time of day
  - clothing / armor / jewellery / lack of any of these
  - character buff or debuff
  - spell / prayer
  - weapon / tool / mod / circuit
  - body part
  - any combination of the preceding

  Seems like it would be relatively straightforward to have a list of
  functions for that case, then a list of those lists of functions for
  each possible case that could affect lock picking:

  [
   [PlayerHasBareFeet, IsRaining, IsTuesday, IsBetween11And12PM],
   [PlayerWearingRingX, PlayerHasSpellXCast]
  ]

  Or, have a list of all the different functions for all conditions,
  and go through them. This might look like a BE Tree that takes
  a set of variables and goes through every boolean expression set,
  compiled into a tree with duplicates eliminated. Each condition
  can be written as text.

  Or, I could do what I'm doing with the graph but walk the different
  objects in a tree:
  - Ring 1: affect this event
  - Weather: affect this event
  - Footwear: affect this event
  - <everything in this room>: affect this event
  - <everything in every surrounding room>: affect this event
  The downside here is that we have to stop the world to wait for each
  possible world element. The upside is that events can't happen
  out of order. Also, since my motto for this MUD is "infinit CPU, infinite
  memory, infinite bandwidth", it's just as efficient.

    With the concurrent graph processing, every object can be doing
    work simultaneously: different events kicked off by different
    triggers can run together: two different players picking two
    different locks? No problem, every process for the involved
    locks handles the message storm created by picking the locks
    concurrently.

    Then again, if I have an event process, and a process for every
    object, then multiple event processes can run concurrently too:
    each event process passes the event to each object process.
    One problem with this is the querying: I guess each object
    could pass back either a value or a function; once all the values
    and functions are returned, each function could be run on the
    values; although, how do you know if a function has the values
    it needs when you run it?

      Consider: a ring will help with lock picking if the user is
      wearing an activated necklace; the necklace is only active
      if the player is suffering from hunger;  the player is only
      suffering from hunger if they're hungry and they don't have
      anything preventing hungry from making them suffer.

      Each condition that needs to check something needs to add
      that condition to the list and then maybe go to the end of the
      line. That's exactly what the graph does: each handler
      ignores messages until all the requisite details are filled
      in. Granted, it's still super complicated: one of the conditions
      needs be programmed to look for the rest of the conditions:
      e.g. the ring updates the message from "player picks lock"
      to "Player picks Lock while maybe_wearing_necklace_x", whereupon
      necklace "x", seeing maybe_wearing_necklace_x, changes
      the message to "Player wearing NecklaceX picks Lock while_hungry",
      at which point the player's hunger buff process changes it
      to "Player maybe_suffering_humber wearing NecklaceX picks Lock"; now
      everything that can affect whether a player suffers from
      hunger can resend the message with "not_suffering_hunger".
      But what if multiple buffs and debuffs are interacting.

      Well, I think the lesson here might be *not* to make the
      logic that complicated, because it's a lot of work to
      figure out in any case.

I wonder if perhaps I just wanted as many object processes as possible
to be active at once.

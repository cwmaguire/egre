
src/erlmud_handler_attack_resource.erl
attempt({#parents{character = Character, owner = Owner}, Props, {Character, attack, _Target, with, Owner}}) ->
attempt({#parents{character = Character}, Props, {move, Character, _From, _To, _Exit}}) ->
attempt({#parents{character = Character}, Props, {die, Character}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Character, attack, _Target, with, Owner}}) ->
succeed({Props, {Character, move, _From, _To, _Exit}}) ->
succeed({Props, {die, Character}}) ->
succeed({Props, _}) ->

src/erlmud_handler_attribute_attack.erl
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Character, calc, Hit, on, Target, with, Item}}) ->
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Character, damage, Damage, to, Target, with, Item}}) ->
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Attacker, calc, Hit, on, Character, with, Item}}) ->
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Target, damage, Damage, to, Character, with, Item}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Hit, on, Character, with, Item}}) ->
attempt({#parents{character = Character}, Props, {Target, damage, Damage, to, Character, with, Item}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, _}) ->

src/erlmud_handler_attribute_look.erl
attempt({#parents{owner = Owner}, Props, {_Source, describe, Owner, with, _Context}}) ->
attempt({#parents{owner = Owner}, Props, {_Source, describe, Owner, with, _Context}}) ->
attempt(_) ->
succeed({Props, {Source, describe, Self, with, Context}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, Msg}) ->

src/erlmud_handler_body_part_inject_self.erl
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, BodyPartName}}) when is_binary(BodyPartName) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, BodyPartName, to, Owner}}) when is_pid(Item) andalso is_binary(BodyPartName) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, current_body_part, to, Owner}}) ->
attempt(_) ->
succeed({Props, _}) ->

src/erlmud_handler_body_part_inv.erl
attempt({#parents{owner = Owner}, Props, {Item, move, from, Self, to, Owner}}) when Self == self(), is_pid(Item) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, Self}}) when Self == self(), is_pid(Item) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, Self, limited, to, ItemBodyParts}}) when Self == self(), is_pid(Item), is_list(ItemBodyParts) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, first_available_body_part}}) when is_pid(Item) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, first_available_body_part, limited, to, ItemBodyParts}}) when is_pid(Item), is_list(ItemBodyParts) ->
attempt({#parents{owner = Owner}, Props, {_Item, move, from, Owner, to, Self, on, body_part, type, _BodyPartType}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Item, move, from, OldOwner, to, Self, on, body_part, type, BodyPartType}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, NewOwner}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_body_part_look.erl
attempt({#parents{}, Props, {_Source, describe, Self, with, _Context}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {_Source, describe, Owner, with, _Context}}) ->
attempt(_) ->
succeed({Props, {Source, describe, Self, with, Context}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, _}) ->

src/erlmud_handler_char_attack.erl
attempt({#parents{}, Props, {_Attacker, attack, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Self, attack, _Target, with, _AttackVector}}) when Self == self() ->
attempt(_) ->
succeed({Props, {_Self, attack, _Target, with, _AttackVector}}) ->
succeed({Props, {Attacker, attack, _Self}}) ->
succeed({Props, _}) ->

src/erlmud_handler_char_enter_world.erl
attempt({_, Props, {Self, enter_world, with, _Conn}}) when Self == self() ->
attempt(_) ->
succeed({Props, {_Player, enter_world, with, Conn}}) ->
succeed({Props, _Other}) ->

src/erlmud_handler_char_inject_self.erl
attempt({#parents{}, Props, {Source, Action, TargetName}}) when is_binary(TargetName) andalso (Action == look orelse Action == attack) ->
attempt({Owner, Props, {Self, look}}) when Self == self() ->
attempt(_) ->
succeed({Props, _}) ->

src/erlmud_handler_char_inv.erl
attempt({_Owner, Props, {Self, Action, Item}}) when Self == self() andalso is_pid(Item) andalso Action == get; Action == drop ->
attempt({_Owner, Props, {Item, move, from, Self, to, Room}}) when Self == self() andalso is_pid(Item), is_pid(Room) ->
attempt({_Owner, Props, {Item, move, from, Self, to, BodyPart, on, body_part, type, _BodyPartType}}) when Self == self() andalso is_pid(Item), is_pid(BodyPart) ->
attempt({_Owner, Props, {Item, move, from, _Room, to, Self}}) when Self == self() andalso is_pid(Item) ->
attempt(_) ->
succeed({Props, {Item, move, from, Source, to, Self}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, _BodyPart, on, body_part, type, _BodyPartType}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, Target}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_char_look.erl
attempt({#parents{}, Props, {Source, look, TargetName}}) when Source =/= self(), is_binary(TargetName) ->
attempt({#parents{owner = Room}, Props, _JustPlainLook = {SelfSource, look}}) when SelfSource == self() ->
attempt({#parents{}, Props, {_Source, look, Self}}) when Self == self() ->
attempt({#parents{owner = OwnerRoom}, Props, _DescFromParent = {_Source, describe, OwnerRoom, with, _RoomContext}}) ->
attempt(_) ->
succeed({Props, {Source, look, Self}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, _}) ->

src/erlmud_handler_char_move.erl
attempt({#parents{}, Props, {Self, move, Direction}}) when Self == self() ->
attempt({#parents{}, Props, {Self, move, _Dir, from, _From}}) when Self == self() ->
attempt({#parents{}, Props, {Self, move, from, _From, to, _To, via, _Exit}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Self, move, from, Source, to, Target, via, _Exit}}) when Self == self() ->
succeed({Props, {Self, move, Direction, from, Source}}) when Self == self(), is_atom(Direction) ->
succeed({Props, _}) ->

src/erlmud_handler_cleanup.erl
attempt(_) ->
succeed({Props, {Self, cleanup, self}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_conn_enter_world.erl
attempt({#parents{owner = Owner}, Props, {Owner, enter_world, in, _Room, with, Self}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Player, enter_world, in, _Room, with, _Conn}}) ->
succeed({Props, _Other}) ->

src/erlmud_handler_conn_send.erl
attempt({#parents{owner = Owner}, Props, {send, Owner, _Message}}) ->
attempt(_) ->
succeed({Props, {send, Player, Message}}) ->
succeed({Props, _Other}) ->

src/erlmud_handler_counterattack.erl
attempt({#parents{}, Props, {_Attacker, attack, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Self, attack, _Target}}) when Self == self() ->
attempt({#parents{}, _, _}) ->
succeed({Props, {_Character, stop_attack}}) ->
succeed({Props, {Attacker, attack, Target}}) ->
succeed({Props, {_Self, counter_attack, Target}}) ->
succeed({Props, _}) ->

src/erlmud_handler_exit_move.erl
attempt({_Owner, Props, {Obj, move, Exit, from, Room}}) when is_atom(Exit) ->
attempt({_Owner, Props, {Mover, move, from, Source, to, Target, via, Self}}) when Self == self() ->
attempt(_) ->
succeed({Props, Message}) ->

src/erlmud_handler_hitpoints_attack.erl
attempt({#parents{owner = Owner}, Props, {_Character, does, _Damage, to, Owner, with, _AttackVector}}) ->
attempt(_) ->
succeed({Props, Msg = {Attacker, does, Damage, to, Owner, with, AttackVector}}) ->
succeed({Props, _Msg}) ->

src/erlmud_handler_item_attack.erl
attempt({#parents{character = Character}, Props, {Attacker, attack, _Target}}) %when Attacker == Character, is_pid(Target); %Target == Character -> when Attacker == Character -> {succeed, true, Props};attempt({#parents{character = Character}, Props, {Character, counter_attack, Target}}) ->
attempt({#parents{character = Character}, Props, {Character, attack, _Target, with, Self}}) when Self == self() ->
attempt({#parents{}, Props, {allocate, _Required, 'of', _Type, to, Self}}) when Self == self() ->
attempt({#parents{}, Props, {_Attacker, killed, Target, with, _AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Hit, on, Character, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Damage, to, Character, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Character, stop_attack}}) ->
attempt({#parents{character = Character}, Props, {die, Character}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {_Attacker, killed, _Target, with, _AttackVector}}) ->
succeed({Props, {Attacker, attack, Target}}) when is_pid(Target) ->
succeed({Props, {Attacker, counter_attack, Target}}) when is_pid(Target) ->
succeed({Props, {Character, attack, Target, with, _Self}}) ->
succeed({Props, {allocate, Amt, 'of', Type, to, Self}}) when Self == self() ->
succeed({Props, {Character, calc, Hit, on, Target, with, Self}}) when is_pid(Target), Self == self(), Hit > 0 ->
succeed({Props, {_Character, calc, _Miss, on, Target, with, Self}}) when is_pid(Target), Self == self() ->
succeed({Props, {Character, calc, Damage, to, Target, with, Self}}) when Self == self(), Damage > 0 ->
succeed({Props, {_Character, calc, _NoDamage, to, _Target, with, Self}}) when Self == self() ->
succeed({Props, {Character, stop_attack}}) ->
succeed({Props, {Character, die}}) ->
succeed({Props, _}) ->

src/erlmud_handler_item_inject_self.erl
attempt({_Owner, Props, {Object, Action, ItemName}}) when is_binary(ItemName) andalso Action == get; Action == drop ->
attempt({_Owner, Props, {ItemName, move, from, Source, to, Target}}) when is_binary(ItemName) ->
attempt(_) ->
succeed({Props, _}) ->

src/erlmud_handler_item_inv.erl
attempt({#parents{owner = Owner}, Props, {Self, move, from, Owner, to, Target, limited, to, item_body_parts}}) when Self == self(), Owner /= Target ->
attempt({#parents{owner = Owner}, Props, {Self, move, from, Owner, to, Target}}) when Self == self(), Owner /= Target, is_pid(Target) ->
attempt({#parents{owner = Owner}, Props, {Self, move, from, Owner, to, Target, on, body_part, type, _BodyPartType}}) when Self == self(), Owner /= Target, is_pid(Target) ->
attempt({#parents{}, Props, {Item, move, from, Self, to, Target}}) when Self == self(), is_pid(Item), is_pid(Target) ->
attempt(_) ->
succeed({Props, {Self, move, from, _OldOwner, to, NewOwner, on, body_part, type, BodyPartType}}) when Self == self() ->
succeed({Props, {Self, move, from, _OldOwner, to, NewOwner}}) when Self == self() ->
succeed({Props, {Item, move, from, Source, to, Self}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, Target}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, Target, on, body_part, type, _BodyPartType}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_item_look.erl
attempt({#parents{}, Props, {Source, look, TargetName}}) when Source =/= self(), is_binary(TargetName) ->
attempt({#parents{}, Props, {_Source, look, Self}}) when Self == self() ->
attempt({#parents{}, Props, {_Source, describe, Self, with, _Context}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {_Source, describe, Owner, with, _Context}}) ->
attempt(_) ->
succeed({Props, {Source, look, Self}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, _}) ->

src/erlmud_handler_life_attack.erl
attempt({#parents{owner = Owner}, Props, Msg = {_Source, killed, Owner, with, _AttackVector}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {Owner, die}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {_Attacker, calc, _Hit, on, Owner, with, _AttackVector}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {_Attacker, calc, _Damager, to, Owner, with, _AttackVector}}) ->
attempt(_) ->
succeed({Props, {_Source, killed, Owner, with, _AttackVector}}) ->
succeed({Props, {Owner, die}}) ->
succeed({Props, _Msg}) ->

src/erlmud_handler_resource_inject_self.erl
attempt({#parents{owner = Owner}, Props, {Owner, reserve, Amt, 'of', ResourceType, for, AttackVector}})  when is_atom(ResourceType) ->
attempt({#parents{owner = Owner}, Props, {Owner, unreserve, ResourceType, for, AttackVector}}) when is_atom(ResourceType) ->
attempt(_) ->
succeed({Props, _}) ->

src/erlmud_handler_resource_reserve.erl
attempt({#parents{owner = Owner}, Props, {Owner, reserve, _Amount, 'of', Self, for, _Proc}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {Owner, unreserve, Self, for, _Proc}}) when Self == self() ->
attempt({#parents{}, Props, {Self, update_tick}}) when Self == self() ->
attempt(_) ->
succeed({Props, {_Character, reserve, Amount, 'of', Self, for, Proc}}) when Self == self() ->
succeed({Props, {_Character, unreserve, Self, for, Proc}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_resource_tick.erl
attempt({#parents{}, Props, {Self, tick, Ref, with, _Count}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Self, tick, Ref, with, Count}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_room_inject_self.erl
attempt(_) ->
succeed({Props, _}) ->

src/erlmud_handler_room_inv.erl
attempt({_Owner, Props, {_Item, move, from, Source, to, Target}}) when Source == self(); Target == self() ->
attempt(_Attempt) ->
succeed({Props, {Item, move, from, Self, to, Target}}) when Self == self() ->
succeed({Props, {Item, move, from, Target, to, Self}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_room_look.erl
attempt({_Owner, Props, {_Source, look, Self}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Player, look, Self}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_room_move.erl
attempt({_Owner, Props, {_Obj, move, from, Source, to, Target, via, _Exit}}) when Source == self(); Target == self() ->
attempt(_) ->
succeed({Props, {Obj, move, from, Self, to, Target, via, _Exit}}) when Self == self() ->
succeed({Props, {Obj, move, from, Source, to, Self, via, _Exit}}) when Self == self() ->
succeed({Props, _}) ->

src/erlmud_handler_set_child_property.erl
attempt({#parents{owner = Owner}, Props, {Owner, set_child_property, Key, Value}}) ->
attempt({#parents{owner = Owner}, Props, {Owner, set_child_properties, ParentProps}}) ->
attempt({#parents{owner = Owner}, Props, {Owner, clear_child_property, _Key = top_item, 'if', TopItem = #top_item{item = Item, ref = Ref}}}) ->
attempt({#parents{owner = Owner}, Props, {Owner, clear_child_property, Key, 'if', Value}}) ->
attempt({_, Props, {_, set_child_property, _, _}}) ->
attempt(_) ->
succeed({Props, _Msg}) ->

src/erlmud_handler_spell_attack.erl
attempt({#parents{character = Character}, Props, {Character, attack, _Target}}) ->
attempt({#parents{character = Character}, Props, {Character, attack, _Target, with, Self}}) when Self == self() ->
attempt({#parents{}, Props, {_Character, calc, _Hit, on, _Target, with, Self}}) when Self == self() ->
attempt({#parents{}, Props, {_Character, calc, _Damage, to, _Target, with, Self}}) when Self == self() ->
attempt({#parents{}, Props, {_Character, does, _Damage, to, Target, with, Self}}) when Self == self(), is_pid(Target) ->
attempt({#parents{character = Character}, Props, {Character, stop_attacking, _Target}}) ->
attempt(_) ->
succeed({Props, {Character, attack, Target}}) when is_pid(Target) ->
succeed({Props, {Character, attack, Target, with, _Self}}) ->
succeed({Props, {Character, calc, Hit, on, Target, with, Self}}) when is_pid(Target), Self == self(), Hit > 0 ->
succeed({Props, {_Character, calc, _Miss, on, Target, with, Self}}) when is_pid(Target), Self == self() ->
succeed({Props, {Character, calc, Damage, to, Target, with, Self}}) when Self == self(), Damage > 0 ->
succeed({Props, {_Character, calc, _NoDamage, to, _Target, with, Self}}) when Self == self() ->
succeed({Props, {Character, stop_attack}}) ->
succeed({Props, Msg}) ->

src/erlmud_handler_stat_look.erl
attempt({#parents{owner = Owner}, Props, {_Source, look, Owner, with, _Context}}) ->
attempt(_) ->
succeed({Props, {Source, look, Target, look, Context}}) ->
succeed({Props, Msg}) ->

src/erlmud_handler_subitem_attack.erl
attempt({#parents{top_item = TopItem}, Props, {Character, calc, Hit, on, Target, with, TopItem}}) ->
attempt({#parents{top_item = TopItem}, Props, {Character, damage, Damage, to, Target, with, TopItem}}) ->
attempt({#parents{character = Character}, Props, {_Attacker, calc, Hit, on, Character, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Character, damage, Damage, to, Target, with, AttackVector}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Character, attack, Target}}) when is_pid(Target) ->
succeed({Props, _}) ->

src/erlmud_handler_test_connection_attack.erl
attempt({#parents{owner = Owner}, Props, Msg = {killed, _Attack, _Source, Owner}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {die, Owner}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {Action, _Attack, Owner, _Target, _}}) when Action == calc_hit; Action == calc_damage ->
attempt({#parents{owner = Owner}, Props, _Msg = {Action, _Attack, _Attacker, Owner, _}}) when Action == calc_hit; Action == calc_damage ->
attempt({#parents{owner = Owner}, Props, _Msg = {calc_next_attack_wait, _Attack, _Attacker, Owner, _, _}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {calc_next_attack_wait, _Attack, Owner, _Target, _, _}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {attack, _Attack, _Attacker, Owner}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {attack, _Attack, Owner, _Target}}) ->
attempt({#parents{owner = Owner}, Props, Msg}) when Owner == element(2, Msg) ->
attempt({#parents{owner = Owner}, Props, {calc_hit, Attack, Attacker, Owner, _}}) ->
attempt(_) ->
succeed({Props, {killed, _Attack, _Source, Owner}}) ->
succeed({Props, {die, Target}}) ->
succeed({Props, _Msg}) ->

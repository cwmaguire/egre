Backing up

February 23, 2019

The revive test is passing.
Any events that a killed process was working on will vanish.

February 18, 2019

Other processes also need to know what the new PID is for an object that is restarted by a supervisor.

If I store the PID of an object in its props then when the object is restarted it will know what its previous PID was. If I know the PID I can, somehow, let other processes know that I have a new PID. Oh, when I die other processes will be notified. They could put something somewhere so that the restarted process knows to send them the updated PID.
I should put the PID index in Mnesia. I could also have a table for processes to register that they need an updated property PID. - I’ve created the dead_pid_subscription table Processes will register a dead PID so they can be updated when the new PID is created There’s a race condition: the new process might be started before the linked object has a chance to register to be notified. When a linked object registers, if there’s already a new PID then the linked object is notified and no subscription is created. Oops, the linked object will still send unsubscribe notice.
I could have a PID -> icon index, or ID -> Icon, except I already have icons in the object table. I can fetch the object and get the ID from there. - I’ve modified the #object{} record to have fields for the PID and icon for convenience
I need to put in a MUCH better commit comment for this. I rushed to get the commit in before midnight and only gave a brief comment. I don’t even mention that I’m using gerlshmud_index as the API to the Mnesia tables.
So when a process is created gerlshmud_index should add the PID of the object to the properties for that object. This is an API leak. Maybe. Should the index know what’s in an object? I’m thinking the object should send what it wants to be added to the index, if possible. But then, should gerlshmud_object know how it’s stored in the index? Probably not. Maybe a proxy object that knows about objects and the index? Sounds overly complicated.
When the process dies and is restarted it grabs its old properties from the index and notifies the index of the new PID along with the old PID.
When objects that have a property with a linked process and that process dies the object registers to be notified of the new PID when the object is restarted
Since an object can be restarted before a linked object can register for updates the old->new pair must be stored for a certain length of time. As registrations come in they can be immediately responded to with the new PID.
Registrations that are immediately responded too still need to be in the subscriptions list because the linked object that subscribed will try and unsubscribe.
PID properties are changed to {dead, PID} when the linked process with PID dies.
I think {dead, PID} property values should automatically be skipped when processing messages.

February 17, 2019

I’ve decided to use Mnesia because it’s distributed and it works directly with Erlang terms. Once the supervisor restarts the process a reloader process will populate the fresh process with all its properties. The fresh process has to look up the PID that matches each ID that’s stored in the properties.

In erlang_play I created a one-for-one supervisor that can create new child processes by re-using the same spec (similar to a simple-one-for-one) but as the above states, it’s more efficient if you have lots of processes (and I will!) to use the simple-one-for-one.
I’ve started implementing a monitor process that will listen for any object PIDs that die and store their ID: new processes that are created can take over those IDs. Ah, but if a process exceeds its restart threshold it won’t get restarted. The monitor process will still hand that ID to the next process to get restarted. If the problem is with the properties then that one process will keep cycling through but there will always be at least one ID waiting in the queue that doesn’t get restarted. Oh, but I’m using simple-one-for-one so if it stops restarting processes then the entire game is done.
"If more than MaxR number of restarts occur in the last MaxT seconds, the supervisor terminates all the child processes and then itself. The termination reason for the supervisor itself in that case will be shutdown.”
How else could I do this?
Can I get the supervisor to re-use the same arguments? lol, it does. Done.

November 15, 2018

I think Neo4J would be _perfect_ for storing the identities and properties of the various processes in the MUD.
Granted, I don't need the flexibility, so Postgres or something would work just as well.
I could even have a separate service that listens for messages from each process for what to back up.

July 13, 2016

I think I should back up a process' properties to an ETS table. If the process dies it can be respawned and grab its props.
Also, if I back up the events coming into a process then I won't silently kill all events waiting in the process' mailbox when it dies.
I could actually split each process into two: the network process and the logic process. The network process could hold onto all the events and properties. If the logic process died the network process would just fire it up again, ... and perhaps skip the event that caused it to die.
But, if the network process dies then we lose stuff anyway. Better to have a process to capture the orphaned ETS table (or have a single ETS table ... wait, no, ... maybe an ETS table per room? I dunno) Yeah, let's push this crap to the limit: ETS tables for everyone!
The supervisor can inherit orphaned tables and pass them back to the new spawned process.
Hmm, that means I can't just set properties, I have to store them.
Ah, but handlers pass back all properties to the network process (i.e. erlmud_object) so I can just update the ETS table. In fact, I could just stuff the _entire_ property list in ETS regardless of what's changed.
I might be able to pass the property list as-is and ETS will store each property as a key-value pair.


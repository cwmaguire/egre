EGRE - Erlang Graph Rules Engine

EGRE has been split off from GERLSHMUD; GERLSHMUD is a MUD built in
Erlang with a graph rules engine. EGRE is that rules engine.

EGRE is a graph of asynchronous processes handling events.
Events flow through the graph and touch one process at a time.
Each process takes in events, modifies it's internal state and either
passes on the event or triggers one or more new events.

Any event is first proposed as an attempt. Attempts are passed
from process to process through the graph.  Each process can either fail the
attempt with a reason or allow the attempt to succeed. Each process can also
subscribe to the event to be notified of the result. Processes can also resend
a different attempt in place of an original or pass on a modified copy of the
original.

Events flow through the graph without locking up other processes.
Each process that handles the event will handle it independently of all other
processes. A process always has the only copy of the event and no locks are
needed. No process will halt processing to communicate with another process.
This means that all information about each event must be contained in the event
itself.

Since processes do not communicate directly, and since all processes
receive all (nearby) events, any process can be added anywhere in the
graph and begin to participate in every (nearby) event. Each process
listens for particluar events and so processes that cooperate to resolve
an event will need to agree on a protocol to communicate via the process
graph.

There are no "transactions" to make sure that information
is still valid by the time it is acted upon.
In a banking environment this would be a catastrophe but in a MUD this is
survivable.

To program with a graph of rule processes, processes must communicate purely
with events: if rule process A needs information, it sends out an event
that requests information. Rule processes can send and receive mutliple
different events that iteratively build up into a complete event that has
all the required information.

For example:

We have rule process A and B.
A gets an event attempt with "Do 'X'" and ignores it.
B gets the event.
B is triggered on "Do 'X'".
B knows that 'X' should be replaced with a pid and sends a new event "Do <pid>".
A triggers on "Do <pid>" and takes some action.

So one rule process added information to an event and resent it,
thereby triggering a another rule process that initially ignored it.

Where I Left Off - EGRE
I need a place to track where I am for when I take long breaks.

┏━━━━━━━━━━━━━━━━┓
┃   2024-03-18   ┃
┗━━━━━━━━━━━━━━━━┛

Okay, I see a problem with my tests now that I'm trying to test attempt_after/3.

  When I do egre_object:attempt/2, it automatically sets 'subs' to
  [self()], but self() is the ct test process.

  If I do egre_object:attempt_after/3, it has the Pid send itself
  a message, which calls egre_object:attempt/2, which automatically
  sets 'sub's to [self()], but self() is now the object process.

  So attempt/2 ends up subscribing the ct test process to the result
  of the message attempt, and attempt_after/3 ends up subscribing
  the target object process to the result of the message attempt.

  I think I should always use attempt_after/3 because it ends up
  calling attempt/2 as well.

  One problem with always using attempt_after/3 is that I can't
  test _not_ subscribing from the outset, as opposed to not subscribing
  during message handling.

  Should message handling subscription directives in the handler
  override the initial attempt/2 call subscription?

  It looks like the only place I use send_after/3 is in the index.

  Very rarely do I ever call attempt/3 and specify not to sub, e.g.
  - cause effect amount
  - send message to player

  I think I need to be able to test attempts with and without automatic
  subscription, because it's two different mechanisms:
  1) an object subscribes after handling an attempt
  2) an object subscribes when it kicks off the message

  Okay, I split the attempt test into two: one that subs from the get-go,
  and one that doesn't.
  Then I also got the attempt_after testing working, which is what
  I originally set out to do tonight.

┏━━━━━━━━━━━━━━━━┓
┃   2024-03-16   ┃
┗━━━━━━━━━━━━━━━━┛

I wrote all this out in my commit for my second EGRE test, which checks
if an object can call attempt on a handler module.

However, I think I can sum it up by explaining that when a user types
  "pick lock"
there's actually two things going on here: parsing the command and then
actually picking a lock.

  This test just makes sure that a handler for an object sees an event by
  changing one of the object's properties. Normally attempt functions don't
  change an object's properties because a message is not an event since
  the _intended_ action might not be possible. It's not until any handler
  for any object judges that the message succeeded or failed that the event
  has "happened"; even then we might not know *why* the event didn't happen.

  Take, for example, picking a lock. If a  say "pick lock" and kick off a
  {Character, pick, "lock"} message, it may be that the lock fails the
  event before the character has a chance to point to out that it has no
  way _to_ pick the lock. In this case we'd break the action into two
  steps:
  1. see if picking "lock" even makes sense:
    - is there something called "lock"
    - is lock "pickable"?
    - does the character have the means to pick a lock?
    - is the character able to do any actions?
  2. run the lock picking logic with the actual lock and whatever the
     player needs to pick the lock.

  The first "message attempt" might fail because the player didn't have
  a lock pick in hand, so the lock was never actually interacted with.

  If the first message attempt fails the MUD might respond with:
  "With what, your tongue?"

  If the first message attempt succeeds then *now* we know that everything
  is in place for the player to actually go about the business of trying
  to pick the lock.

  The second "message attempt" might fail because the player fails
  whatever checks were required to pick a lock.

  If the second message succeeds the lock might change it's property from
  locked to unlocked. Further, a third message event might be kicked off
  to sound an alarm.

  (Bear in mind that I'm using this rules engine for text-based games, so
  my exmaples are all going to be MUD related.)

  The benefit of using a rules engine is that *any* logic can be
  incorporated into any object: any object can get involved with any stage
  of, in the example above, picking a lock:
  - something might prevent the player from seeing the lock
    "What lock? You don't see a lock. Maybe you just *thought* you saw a
    lock"
  - something might prevent an alarm from sounding:
    "You pick the lock. You hear a fizzle and wonder if maybe an alarm was
     supposed to sound. Boy howdy, aren't you the lucky one!"

  However, the downside of all this flexibility is potentially very
  complicated logic. If we constrain the lock-picking scenario down so
  there can only ever be a few choices, then we could streamline things
  down to "check if there's a lock and the player has a lockpick in hand
  and they have the lockpick skill and if the lock is actually picked and
  if the alarm sounds."

  The idea behind this rules engine was that any logic could be inserted
  into any event handling at any time in the future. I could decide that
  any player wearing some combination of a ring, a hat and bare feet,
  picking a lock made of gold at night on a Tuesday while under the
  affects of a spell will have a +10% chance of succeeding and a +50%
  chance of triggering an alarm.

  Hmm, how would I model that?
  Each of the properties involved could modify the event to add a flag to
  the event, e.g. character_has_bare_feet, but what object would
  ultimately hold the handler that checked for all the requisite flags?
  Well, I could have an object setup to model that condition: e.g. a
  spell. If the spell saw a message indicating that a player was actually
  picking a lock

Okay, I have the following tests:
- start object
- send message attempt
  - check changed props
- succeed message and subscribe
  - check changed props
- succeed message and don't subscribe
- fail message and subscribe
  - check changed props
- fail message and don't subscribe

See 2024-03-11 for the other tests I need.

┏━━━━━━━━━━━━━━━━┓
┃   2024-03-11   ┃
┗━━━━━━━━━━━━━━━━┛

What am I going to test?

What does EGRE do?
What am I testing in EGRE_MUD_1?

- player_move
  - tests that {Player, move, s} works
    - requires:
      - rules_char_move convert to {Self, move, s, from, Room}
      - resend with log

I think I see where this is going.
I need to test:
- populate
- attempt & sub
- attempt & don't sub
- attempt_after
- set
- props
- fail
- succeed with more objects
- succeed on last object
- resend
- broadcast (only down, currently; i.e. not to owner, char, body part, top item)
- merge
- handle

Basically, and this seems obvious now, just go through egre_object.erl and test
almost every function.

  Most of what I use is egre_object:attempt/2,3

  Also, attempt/2,3 can designate the next action to be:
  - {resend, Target, Message}
  - {fail, Reason}
  - succeed
  - {broadcast, Message}
  - stop

So, for the first test I can make sure a single rule is called
with attempt, returns succeed, and nothing subscribes so no
object is notified; i.e. succeed is not called on any object.

Actually, I can just try to start a single object.

  Previously I did this with supervisor:start_child(egre_object_sup, [Id, Props]).
  I should still be able to do that.

┏━━━━━━━━━━━━━━━━┓
┃   2024-03-10   ┃
┗━━━━━━━━━━━━━━━━┛

=== ERROR! init_per_testcase crashed!
	Location: [{egre_SUITE,init_per_testcase,34},
              {test_server,do_init_per_testcase,1552},
              {test_server,run_test_case_eval1,1253},
              {test_server,run_test_case_eval,1223}]
	Reason: {{badmatch,{error,{cowboy,{"no such file or directory","cowboy.app"}}}},
 [{egre_SUITE,init_per_testcase,2,[{file,"test/egre_SUITE.erl"},{line,34}]},
  {test_server,do_init_per_testcase,2,[{file,"test_server.erl"},{line,1552}]},
  {test_server,run_test_case_eval1,6,[{file,"test_server.erl"},{line,1253}]},
  {test_server,run_test_case_eval,9,[{file,"test_server.erl"},{line,1223}]}]}

  Fixed

=INFO REPORT==== 10-Mar-2024::15:33:56.453931 ===
    application: egre
    exited: {bad_return,
                {{egre_app,start,[normal,[]]},
                 {'EXIT',
                     {{badmatch,
                          {error,{ct_egre@a,{already_exists,ct_egre@a}}}},
                      [{egre_app,setup_mnesia_schema,0,
                           [{file,"src/egre_app.erl"},{line,41}]},
                       {egre_app,setup_and_or_start_mnesia,0,
                           [{file,"src/egre_app.erl"},{line,33}]},
                       {egre_app,start,2,
                           [{file,"src/egre_app.erl"},{line,12}]},
                       {application_master,start_it_old,4,
                           [{file,"application_master.erl"},{line,293}]}]}}}}
    type: temporary

  Just doing:

  erl -pa ebin
  1> application:ensure_all_started(egre)

  ... crashes

  Oh, I wonder if CT is already using Mnesia
  Yeah, I added mnesia:info() and it looks like CT has a table called "schema" in RAM.

  ░ Printing Mnesia info
  ░ ---> Processes holding locks <---
  ░ ---> Processes waiting for locks <---
  ░ ---> Participant transactions <---
  ░ ---> Coordinator transactions <---
  ░ ---> Uncertain transactions <---
  ░ ---> Active tables <---
  ░ schema         : with 1        records occupying 422      words of mem
  ░ ===> System info in version "4.21.4", debug level = none <===
  ░ opt_disc. Directory "/home/c/dev/egre/logs/ct_run.ct_egre@a.2024-03-10_16.02.00/Mnesia.ct_egre@a" is NOT used.
  ░ use fallback at restart = false
  ░ running db nodes   = [ct_egre@a]
  ░ stopped db nodes   = []
  ░ master node tables = []
  ░ remote             = []
  ░ ram_copies         = [schema]
  ░ disc_copies        = []
  ░ disc_only_copies   = []
  ░ [{ct_egre@a,ram_copies}] = [schema]
  ░ 2 transactions committed, 0 aborted, 0 restarted, 0 logged to disc
  ░ 0 held locks, 0 in queue; 0 local transactions, 0 remote
  ░ 0 transactions waits for other nodes: []


  ChatGPT was no help.
  I think I need to look at what "ensure_all_started" does.
  I'm guessing that if I just start Mneisa (mnesia:start()) without first creating a schmea,
  it will create one in memory.

  ░ running_db_nodes. Returns a list of nodes where Mnesia currently is running.

  Yeah, looks like Mnesia was already started.

  ░ opt_disc
  ░
  ░ Optional disc. The schema can reside on disc or in RAM. If the schema is found
  ░ on disc, Mnesia starts as a disc-based node and the storage type of the schema
  ░ table is disc_copies. If no schema is found on disc, Mnesia starts as a
  ░ disc-less node and the storage type of the schema table is ram_copies. Default
  ░ value for the application parameter is opt_disc.

  Yeah, so I guess Mnesia isn't finding a schema in the directory it expects, so
  it creates the schema in memory: I can see ram_copies = [schema].

  From the "app" docs, concerning the app.src file:

  ░ applications
  ░ All applications that must be started before this application.

  So, if I want to create a schema before I start Mnesia, then I can't
  have Mnesia listed as a dependent application.

┏━━━━━━━━━━━━━━━━┓
┃   2024-03-08   ┃
┗━━━━━━━━━━━━━━━━┛

  Here's what I'm seeing:

  egre_app

   - mnesia stuff

   - egre_sup

     - egre_object_sup (supervisor)

     - egre_index (worker)

     - egre_event_log (worker)

  Where does egre_hierarchy come in?
  It handles adding children to parents and then checking if a child
  is a descendant of a parent; or rather, if an object is the child
  of another object

┏━━━━━━━━━━━━━━━━┓
┃   2023-11-17   ┃
┗━━━━━━━━━━━━━━━━┛

Removed egre_conn_sup from the egre_sup.
EGRE doesn't know anything about "connections". That's a MUD thing.

Responsibilities by Layer (but not implementation details)

MUD
  -content:
    - game objects
      - properties
    - game rules: e.g. sword does damage
    - any other logic that's specific to this MUD: e.g. description templates

------------

Engine
  - connections
    - include test connections
  - player accounts
  - loading up rules engine with MUD rules
  - logging

------------

Rules Engine Process Graph
  (lol, EGREP: Erlang Graph of Rules Engine Processes)

  - process messages
  - track processes
  - persist process properties
  - persist process connections

EGRE knows that rules have a protocol:
- attempt -> succeed | fail | resend | broadcast
- maybe subscribe
- updates

So questions get turned into yes, no or more questions.
Answers are distributed.
This is the machinery to propagate events.
Anything other than broadcast propagation implies logic, logic implies rules

"If you have rules, I will run your rules."

"have rules" implies that something must express "ruleness" to be a rule.

┏━━━━━━━━━━━━━━━━┓
┃   2023-08-06   ┃
┗━━━━━━━━━━━━━━━━┛

I think I have EGRE pretty clean. I can focus on setting EGRE_MUD to use it as a library.

┏━━━━━━━━━━━━━━━━┓
┃   2023-08-04   ┃
┗━━━━━━━━━━━━━━━━┛

First note after switching from GERLSHMUD to EGRE.

Okay, what do I need to keep just for the graph?

I've removed a bunch of notes files not relevant to the graph.

░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

┏━━━━━━━━━━━━━━━━┓
┃   2022-08-31   ┃
┗━━━━━━━━━━━━━━━━┛

Trying to figure out quest handlers.

I'm leaning towards have a separate network where I send a duplicate of each success. A list of quest trackers process the messages; each quest tracker is attached to a player, or a group of players, in the case of a co-op quest.

The network could be serial or parallel: i.e. every quest handler could be broadcast each message, or they could all be passed through all the quest handlers in a line. I don't see any reason why I'd make some wait and not send them all together.

(Remember: infinite CPU, infinite RAM, zero latency).

Okay, so all gerlshmud_object processes will forward all successes to the quest tracker proxy, which will then send them to all quest trackers.

What do quest triggers do when they're complete?

Maybe I set them up with the appropriate process to tell when the quest is complete?
(Should I have a "quest complete" attempt?)

--------------------------------------------------

2022-08-30

D'oh! I didn't have a {room, Room} property in my player character and the connection gear was depending on it. I've fixed the connection gear to use {owner, Room} instead.

--------------------------------------------------

2022-08-29

The connection doesn't seem to be getting my {send, Player, <Msg>} events.

The 'conn' property of the player seems to get erased.

I don't see anything in gerlshmud_event_log.erl that would filter a {conn, <pid>} property out of an objects properties.

--------------------------------------------------

2022-08-28

I think I'll only need the character's name for listing items on a corpse:
Bob the Zombie has: sword
Bob the Zombie has: 10 copper

I don't plan to list where each item was found, like I do with describing a character, but I could.

Only players can search, so the "Searcher" variable can be named "Player": this makes it obvious when we send a message to the "Searcher", that we're sending a message to the player. We can only send messages to the person playing a character through their player character.

Instead of a "Context", like I use for describing something, I'm just using "Name" for the name of a character I'm searching.

I've got a two stage search ... crap. Did I decide to only use one stage and specific failure messages?

How do I know whether to counterattack: filter out failures that preclude attacks, or look for specific failures:
- spotted / noticed / pickpocket_failed

Yeah, I'm going with the specific-failure method.
If the search failes with 'character_detected_search' then the Character will attack the player.

Since I'm only implementing searches on corpses right now I can leave this for later.

How would I gather all search output into one message? I could listen for send messages, but who would send the first one? The Character? Hmm, the Character could immediately send out a result message and then inventory search handlers could add to that message; once the message succeeded the Character could send the message to the player. How long should an inventory search handler wait to add results to a "send search results message"? What if the results message comes before the item process even knows that the character is being searched? I think I'll just stick with the items sending responses asynchronously. The UI can always handle displaying results either by type (e.g. have a separate window / area) or by time (e.g. once you get a search result, wait N seconds for more results)

Parsing could use some work: I should tokenize the input so I can do pattern matches to get the action: e.g.
"s" -> "south"
"so" -> "south"
...
"south" -> "south"

"se" -> "souteast"

"sea" -> "souteast"
...
"search" -> "search"

I could also allow short cuts, player-made aliases, etc.

e.g. "sr" -> "search"

I'm confused: how can the look test always get the messages back in the same order? Hmm, because the order is deterministic: if you create the world the same way, then processes will be sent messages the same way.

----------------------------------------------------------------------------------------------------

2022-08-26

I don't need to play the MUD to see that a particular mechanic is working.

I want to be able to search a corpse.
So far if you search a character it will respond by attacking you, unless it's dead: in that case g_h_life_attack will fail the attack because it's dead.
Eventually I'd like to add some nuance to that: maybe have the source and target do skill checks for pickpocketing.
I don't want to get too far into the weeds because I just want to loot corpses at this point.

I might need two stages for search:
- you succeed to try to search
- you succeed to complete the search
I have no idea what things might prevent me from even attempting to search:
- you can't see
- your hands are full
- something warns you that the police are watching
- you have a spell that prevents you from searching a target that's too aware
- the target is looking directly at you and you can't search them until they're distracted
- the target leaves before the event can finish
- etc.
In each of the cases I don't manage to lay hands on the target, so the target shouldn't attack me.
However, once I know I'm successfully attempting the search, then I can check to see if the target noticed, and if not then list all the items we find.
On the other hand: everything could be like this: you try and unlock the door but you can't see it, or you're attacked, or the door disappears, etc. Should have have two stages for that?
... maybe. Maybe I need to switch the entire mud to have a three stage event:
- attempt
- start
- complete

But, I could also look at the fail _reason_ to determine how to react. If the failure message is "The target notices that you are trying to search them", then the target can attack. If the failure message is "Can't find target" (i.e. because they left) then I can skip the attack.

Items are going send back something "On <Target Name> you find: <item description>"; I could keep adding to the message so that all items build up a description of what items are carried, or I can just put them out one at a time. One day I envision several web pages for the same character that will all listen for different information and display it however they please. I might even send back JSON instead of text.

Hmm, certain characters could spawn items when they die: bones, hide, motors, scrap, etc. Although, you could probably just ... process a corpse to get body parts. Maybe only some body parts are randomly left over when a body "decays"; maybe robots just decay slower.
(Reminder: this isn't a simulator.)

I had an idea today for a simple mud:
Consider the numbers as rooms:

  3   7
  |   |
1-2-4-6-8
    |   |
    5   9

Rooms 4, 6 and 8 are boss rooms; rooms 3, 5 and 7 are sub quests, required to finish the bosses; room 9 is the treasure.

I should probably allow players to "get ____ <type of corpse>" before they've searched the corpse.

I might want to put numbers on the front of duplicate character and item names for the sake of pattern matching ... except ... characters won't know what number they are.

I used sed and grep to get rid of all the source file copyright paragraphs.

----------------------------------------------------------------------------------------------------

2022-08-23

Does the item move gear set the character on items?
I don't think it does unless it's being added to the character itself.
I wonder if I should have backpacks and pockets? A common mechanic is to limit backpack size.

It probably should though: how would a piece of armor know that it's Character was being attacked?
I'd have to add all body parts and parent items to every attack message.
[weapons_dont_know_their_character] (C-w,f)

a room has multiple {character, Pid} properties. I'm using that to figure out what processes _belong_ to a character.
Change to {characters, [A, B]} ?

How am I getting away without returning Props on line 75 of _handler_subitem_attack?

gerlshmud_object:ensure_message/2 expects one of:
- result, sub, props
- result, sub, props, log
- result, new message, sub, props, log

I don't need to resend the {Char, cleanup, body_parts, BodyParts, in, Room} message: I can constructively add to it by returning the modified message from attempt.
Not true: if an item sees the event before it's body_part owner then the body_part won't have added itself to the list.

----------------------------------------------------------------------------------------------------

2022-08-22

I don't have to wait for the attempt I first saw to succeed before I call stop; I can spawn more events and wait for any one of those, or potentially more of those.
If I have flags on the property then I could wait for multiple success, record each one and each time check and see if all have succeeded. I might need to reset those values if they don't all get set within a certain amount of time so that the process isn't perpetually stuck in a half-finished waiting state.

The thing is, I can only wait for one event to succeed: i.e. I can't wait for a top level {Character, cleanup, in, Room} _and_ an unknown number of {BodyPart, cleanup, in, Room} events.

I might need to figure out how to do this without waiting: but also before processes die and splinter the graph.

Oh! I forgot I can keep resending messages with more information. Each body part could add itself to the {Character, cleanup, in, Room} message and kick it back to Character.

The 'succeed' never happens until the entire graph has been traversed: if we keep changing the event then the 'succeed' keeps getting postponed.
Since we traverse the entire graph with each event change, we know that we'll only stop resetting until all the body parts have had a crack at updating the message.

CPU is infinite, use as much as you like. See how much you can use.
In 20 years a ridiculous amount of CPU might be found in a $0.99 throwaway chip.

I fixed the parse transform: it couldn't handle a cons in the resend body

Now the sword is being killed and I have no idea why.

I do a bunch of linking; I think I need to unlink.
I'm seeing that the sword gets an 'EXIT' message and I think it's because it gets linked to every process it knows about when the world is populated.
Also, maybe I should unlink everything and just have watchers send messages when something dies.

----------------------------------------------------------------------------------------------------

2022-08-21

Still trying to get decompose to move character items to room. I might need to just read through the logs to see what I *am* getting.

I looked at the log messages and I'm only getting as far as {<Player>, cause, 1000, 'of', fire, to, <Zombie>, with, undefined}
Ran it again, now I'm seeing {<Player>, killed, <Zombie>, with, fire} and then the log message for when the Zombie process gets the 'EXIT' message ... I'm presuming from the supervisor.
The log message shows the 'EXIT' coming from z_hp.

Okay, I figured it out: the stop handler had a very promiscuous succeed function; the succeed functions are called *per-process* not per handler; if the process got a succeed, then all handlers for that process have their succeed functions called.
I might need to remedy that and record which handler succeeded: only one handler per process can succeed.
On the other hand, I should be disciplined.

I don't want to stop item processes belonging to a character. How does an item know that it shouldn't stop?
There's no "{process_type, item}" property.
I could use the handlers, but that feels clunky.
Drop on death?
I like it.
A fist is considered an item that is wielded on a hand; I won't mark {drop_on_death, true}, so it will be stopped, not dropped.

If I changed props to a map I could match in function arguments.

I don't think items get the character property set, so I'll have to propogate it down all the Character's children.

We don't want sub-items to move from their parent item to the room separate from their parent item: e.g. don't pull the magazine out of a gun and put both the gun and the magazine in the room (i.e. on the ground).

Will all items in a character, that aren't on the character itself, be on a body part?
If so, I can add a gerlshmud_handler_bodypart_cleanup handler and propagate the character cleanup down.

Right now I've got the zombie's sword on the zombie itself, so item_cleanup should work to drop it.

I can't guarantee that propagated events will finish before {Self, cleanup, in Room} finishes. To propagate I have to generate new events and _char_cleanup only waits for the main event to succeed.
The item processes won't die, but the body part processes will.

There's no easy way to check if all items have been removed.

Maybe I can approach this from the other way: an item knows it needs to move to the room. Items don't know what rooms they're in.
Ah, but the {Self, cleanup, in, Room} event knows the room: I could do {stop, self(), in, Room} ... oh, but the item would still need to know if it was part of the character being stopped.
Maybe I can make sure the stop even is only propagated "down", i.e. to children of the character.

Maybe all parent items need to know what character they're on for when the character dies.

Broadcast messages already only go down: they won't go "up" to owner, or "up" to character, etc.
Looks like it only goes down one level.
Ah, it's used by set_child_property, which only ever re-broadcasts down.
Every type of process on a character that could possible lead to a sub-item would have to implement a cleanup that re-broadcast the cleanup down.
Hmm, can I have a cleanup that does what set child property does?
Maybe I could just make it a universal handler.

I think the only things on characters that can have parent items are body parts. Body parts can listen for {cleanup, Char} and re-send that as {cleanup, Self}; however, again, how do I get body parts to pass on these messages before they die: a "is_cleaned_up" flag?
If the body part wasn't cleaned up it could just resend the stop message to itself.

Succeed calls are blocked on all process handlers being called. Nothing is blocked by the succeed calls. I can't count on all succeed calls being finished before anything else hands: the entire point of this MUD is for things *not* to be synchronized.

I think all items need to know who their character is, for when the characters die. All items need to be able to respond to the first cleanup event.

Ugh, what a pain. The item inventory messages are already huge.


----------------------------------------------------------------------------------------------------

2022-08-20

Working on decompose test with ?WORLD_3.

Lots of processes are dying when the character process dies. Why? Not sure, but I needed to tell the supervisor to stop the child, otherwise it will just keep restarting it.

I think if I have a character stop, as with char_cleanup sending stop and the stop handler handling it: everything with that character can recognize it, subscribe to it, and stop.
I think I can assume that only characters will stop.
Spell effects already have their own way of stopping, as do attacks.

Do I need to allow stops to succeed? It's a meta message, not a game message.
Ah, I need to make sure everyone got the message: if I just ... will the message keep propagating (e.g. to children) if I kill this process? Nope.
If I wait until succeed then all the children of the character can stop at once.

The character's owner is the room.

The only reason I'm passing Props to handle/4 is so that I could call 'stop' on all non-parents. I'm going to stop based on Character, so I don't need that. It might be a nice optimization later on.

Huh, I already had an inv_cleanup handler

How do I wait for an item to be transferred to a room before it's stopped? D'oh! We don't stop items.
I don't think I have to worry about the item's owner subscribing to the event.
Doesn't look like items get a character property.

z_hp is being killed and I don't know why.

When I kill the process using the supervisor things don't shut down cleanly in the logs: I get a bunch of errors. I tried to trap exits so when the supervisor tried to terminate the gen_server the gen_server could catch the 'EXIT' and shut down cleanly; however, I still got errors.
Ah! I had to pass the reason for terminating as 'normal'; I was just passing on 'killed' from the supervisor.
If you don't specify 'normal', 'shutdown', or {shutdown, _} then you get a ?LOG_ERROR(...)

I tried getting PID-specific tracing to work but couldn't. Nevermind, it works.

Do I need to set the {room, <room pid>} property on Characters so that the #parents{} record can be filled in?

----------------------------------------------------------------------------------------------------

2022-08-19

I'm trying to figure out why I'm not seeing icons in the HTML log:
- gerlshmud_event_log.erl strips out any {_, Pid} properties if the Pid isn't in the process index
- I don't know why {?EVENT, Effect} (i.e. {event_type, fire}) doesn't make it into logs/gerlshmud_log.js

I traced gerlshmud_handler_hitpoints_attack and gerlshmud_event_log: all I see from gerlshmud_event_log logs is "no_handler" for the handler: so ...hitpoints_attack is never handling the event. In fact, the handler is never even called.
Is it not connected to the graph? Might need to check the world.

- I'm using ?WORLD_3
- p_hp uses ?HITPOINTS_HANDLERS
- ?HITPOINTS_HANDLERS has gerlshmud_handler_hitpoints_attack
- player has p_hp
- I see a log entry for the p_hp object and the gerlshmud_handler_hitpoints_attack handler in its list of handlers
- no_handler only happens when an object's props doesn't have {handlers, _} property
- the log message shows that the object has four handlers
- Ah, I was using 'zombie' instead of the zombie's pid, so the zombie's HP object wasn't recognizing 'zombie' as its owner
- Okay, the zombie is now dead

Why isn't the sword on the ground after the zombie dies?
How long do I need to wait?

----------------------------------------------------------------------------------------------------

February 16, 2022

Do I need a garbage collector? If I'm cleaning up a corpse and I disconnect all properties, how will I know which properties are abandonded?Well, I could send out a message saying for an object to kill itself and if another process recognizes it, it can fail the kill. This is a form of garbage collection. Some process: "Kill yourself. No one cares about you."Attached process: "Don't do it! I still care about you."

----------------------------------------------------------------------------------------------------

February 15, 2022

The protocol extractor is done. I've added resends and broadcasts by threading a State variable through the recursion. I renamed "exprs" to "search" and "bin" to "print" to hopefully make those clearer. I also made resends and broadcasts events in their own right.
Now I'm back to getting corpses to decompose.

----------------------------------------------------------------------------------------------------

February 9, 2022

The protocol extraction parse_transform is in good shape. I still need to make sure gerlshmud_object:attempt_after/3 works and I need to figure out why the body_part_inv clear_child_property event isn't showing up.
I'm working on moving items from a corpse to the room when the corpse is cleaned up. To do this I'm trying to figure out how the child properties work.See Clear Child Properties &amp; BroadcastingJanuary 28, 2022
I've been thinking about the "protocol" some more and it would be nice to see all the messages neatly formatted and sorted. I could achieve this with a parse transform and maybe a macro to tag the messages. I'd like to see something like this:

----------------------------------------------------------------------------------------------------

January 27, 2022

I copied the "What do I _need_ for a MUD?" into the top of this note.I don't know what I've done so I didn't check anything off.
I want to create some way to catalog the different rules that I have, i.e. the event handler function signatures.I believe I had, and have, settled on using a parse transform to peel those out. I'll need to standardize, somehow, the function calls so that the parse_transform can pick them up.
I have a "catalogue" script somewhere I think. Hmm, it works pretty well. What problem am I trying to solve?

----------------------------------------------------------------------------------------------------

September 23, 2021

"bullet hits armor" ... the armor should degrade
I need to differentiate _what_ gets hit, if anything. I could just say that no hit means no damage so armor blocking a hit means no hit, therefore no damage.
In 7DTD armor damage isn't really much of a thing. I occasionally check to see how my armor is holding up. This comes down to how much of a simulator I want to create and how much of a game.

----------------------------------------------------------------------------------------------------

August 31, 2021

I don't need to check if a thing is alive before doing any action, I just need to remove any actions that require a living thing. So, if a zombie "dies" I can just replace its handlers with 'dead_handlers'; when something is brought back to life I can replace the handlers with 'live_handlers'. I can do the same with 'functioning' / 'broken'

----------------------------------------------------------------------------------------------------

August 30, 2021

I've got spell and melee attacks working with effects. Looking back through my commit comments I see I had an idea about parent and child effects: your flaming sword doesn't light your opponent on fire if it doesn't hit them. "Hit" is a bit nebulous: did I hit because I got through the enemies armor? Did I hit their armor? Did my sword get blocked by a spell? I guess I could get as complicated as I want. I think I should add multiple effects per attack (e.g. flaming sword, poisoned arrow, exploding bullet, etc.) but not worry about inter-effect logic.
I don't really know what to do next.
I think I'll do corpses
What do I _need_ for a MUD? movelooksaygetputattackhealdielootwield

----------------------------------------------------------------------------------------------------

August 6, 2021

player_look test is busted because the enemy's race is coming back as 'value' and gerlshmud_test_socket is trying to append it to a binary. Fixed.

----------------------------------------------------------------------------------------------------

March 19, 2021

Broadcasts create multiple events. This is why they are failed: to prevent the broadcast from going down branches that don't make sense.

----------------------------------------------------------------------------------------------------

March 7, 2021

I fixed the player_wait_resource test. Because the hits are now random I needed to make sure that the target has less than max hit points instead of a preset amount after 1 attack.
I'm working on the attack_with_modifiers test but the {<player pid>, attack, <giant pid>} message isn't going anywhere. I realized that I don't have any effect prototypes hooked up to the player or giant attacks (fist and club). I think there must also be something wrong with the fist and club that they aren't firing off attacks.

----------------------------------------------------------------------------------------------------

March 6, 2021

Tests are failing, not sure why.
Trying to figure out how IRIS uses all.test.spec (See also Testing: specifying CT suite)The IRIS Makefile sets CT_OPTS = -spec all.test.specCT manual (Chapter 8 Running Tests and Analyzing Results) says "-spec <testspecs>     Uses test specification as input (described later)"
8.8 says (paraphrasing):test spec is a sequence of Erlang terms normally declared in one or more text files, but can be passed to CT in the form of a list. There are two general types of terms: config terms and test spec terms.
Config terms are basically command line options in a file
You can:label test runeval expressions before running testimport config (like ct_run -config/-userconfig)specify top-level HTML log dirEnable code coverage analysisInstall CT hooksInstall event handler pluginsSpecify include directories (like ct_run -include)Disable auto-compilation feature (like ct_run -no_auto_compile)Set verbosity levels (like ct_run -verbosity)
Where am I doing ct_run? (i.e. where can I specify which tests to run?)I'm doin ct_run through erlang.mk by saying "make ct" in my "t" file.
I added the ability to specify a number of test case names to the "t" file so I can run a particular set of test cases without modifying any files. I lost a couple hours because I put the "-case <case 1>" argument _after_ the "-erl_opts" argument. Everything from "-erl_opts" (or whatever) is ignored by Common Test.
The "-case <my_test_casse>" does _not _ require a group even though the docs are a little bit ambiguous.

----------------------------------------------------------------------------------------------------

February 19, 2021

Events need to be able to reach all processes: if I create effects then I need something (e.g. the attack, or the target) to point to them.
Same goes with the effect creator: the attack needs to point at the effect creator so that _something_ makes sure that the effect creator gets sent events.

----------------------------------------------------------------------------------------------------

February 14, 2021

Crap, some effects are depending on others: a flaming sword depends on hitting to do damage. Which effect calculates the hit? I think I can just add a "parent effect"
Some effects might at first seem to be a foregone conclusion in a lot of cases (e.g. poison), but we still need to go through a "to hit" stage in case something else can block it. Anything that can be done can be undone.
Maybe I _should_ have effects create themselves. That way, in the worlds file I can have effects reference other effects as parents. I would need an effect spawner for each effect, OR, I'd need each effect to track references to each effect instance.I'd really like to have each piece of logic running in its OWN process: I don't want one process trying to burn ten different targets, I want TEN processes all calculating if they burned their own target.

----------------------------------------------------------------------------------------------------

February 13, 2021

Effects are the new attacks. The g_h_attack module now just kicks off effects; effects need to subscribe for resources.
I need to take all of the resource handling out of g_h_attack and put it in g_h_effect_attack. g_h_effect_attack is the generic handler for all effects. Particulars will be based on properties.
Manage attacks, Kick off effects, Calculating hit roll, effect (e.g. damage) rollgerlshmud_handler_attack:          listens for attack instigation and triggers g_h_effect_creategerlshmud_handler_effect_create:   attached to attack vector, creates effect processesgerlshmud_handler_defend:         event handler for anything that defends - can reduce hit or effect (e.g. damage) rollsgerlshmud_handler_effect_attack:   rolls for hit, rolls for damage, attaches to target, started by g_h_effect_creategerlshmud_handler_char_attack:    counter attack
Should attack? and Should defend? gerlshmud_attack:                    behaviour for anything that handles "should attack?"gerlshmud_defence:                  behaviour for anything that handles "should defend?"gerlshmud_attack_melee:            determines "should attack?" for melee weapons (is wielded &amp; is attack)gerlshmud_defence_melee:          determines "should defend?" for melee weapons (is wielded &amp; is defence)gerlshmud_defence_armor:          determines "should defend?" for armor (is wielded on proper body part)gerlshmud_attack_spell:              determines "should attack?" for spell (is memorized and is attack)
We send the character who misses a message, and the target who is missed a message, when g_h_effect_attack calculates that it has missed. This is because that attack ends there and no one else would be able to send the message.January 20, 2021
weapons should listen for an attack to succeedan attack shouldn't be a roll, just a pass/fail (other processes can block an attack, e.g. if attacking char is dead, target is dead, etc.)if an attack succeeds then all attack effects should spawnAs resources allow (e.g. stamina, mana, etc.)Each spawned effect should calc its own hits and damage Each effect attaches itself to the targetEach effect lives for however long it's programmed foronce/counttimerany other logic (e.g. number of charges, distance, etc.)
I've moved the effect handler properties into the attack process so that the attack process (i.e. p_fist) can spawn the effect handler with those propertiesThe effect process ...oooooooh, the prototype effect process could have generated child effect processes ... hmmmmI think that's confusing. It was more intuitive to have the attack process generate the effectsThis way the attack process has the "create" handler and the effect process just has the "attack" handlerHaving the parent effect process create copies of itself would be confusingThe parent would have to track that it was a parent so that it would ignore child (i.e. working copy) effect attack handler events

----------------------------------------------------------------------------------------------------

January 2, 2021

To recap:attack objects (e.g. a fist) are processes that exist in perpetuity, they are not created to handle each individual attack. I probably need to spawn processes for each target that an effect interacts with, since effects can outlive an attacke.g. if I light something on fire and run away, that something will still be on fire. Tests are failing because the Zombie is not dyingIn the player_attack test the is_alive property of the z_life object is "true".Somewhere we're not actually doing damage to the zombieDamage should come from effects, so this is probably where I need to fire up an effect process to do damage

----------------------------------------------------------------------------------------------------

December 23, 2020

I don't know if I need to track "self()" in "do damage" events created by the attack process. Do the effects need to know what the attack process is, or do they just need to modify _any_ event that comes by with their character?
Attacks shouldn't do any damage: every attack should have at least one effect and it's the effects that do damage.
Good question to ask: am I making a game or a simulator? False choice: I'm making a platform on which to build games. The game designer can decide what kind of game they're building.
I'm building a game engine, not a game.
In Effects I wrote down the idea to have a new process spawn for each effect-target: I already create a new attack process. This will involve creating a new effect process for each effect.
I have to _calculate_ hits and damage, not just roll them. A calculation might involve an initial roll, but it will also include absolute modifications: e.g. +2 to hit.(I found that in gerlshmud_handler_effect_attack.erl I'm watching for "roll", not "calc")
I _believe_ that I'm creating attack processes when something attacks something else. I don't know where that happens or if that's the case.I'm creating a new effect process in gerlshmud_handler_effect_create
Okay, I've looked in a bunch of older branches and I don't think I was ever creating a new process for an attack.I really thought I was. Items are handling their own attack messages and asking for resources. Maybe I needed separate attack processes before I had resources?
If I create effect processes as part of the world then I don't need to create new effects for those either ... oh, except that I need a new effect processfor each effect-target. I don't think I can attack more than one target at a time, but I can have effects that continue on independently of an attack.
I think an "Attack" was an "attack vector", which was something like a fist or a sword, which was a separate process.
The attacked object needs to listen for effects and apply them.

----------------------------------------------------------------------------------------------------

December 22, 2020

We need an attack type because it determines if something can be _hit_. We need effect types because that determines if something can be _damaged_.
An attack is a process (2021-01-02 - no it's not). An effect is a handler.
gerlshmud_handler_attack is still expecting an attack type on hit succeed. This seems like a simple fix.

----------------------------------------------------------------------------------------------------

December 21, 2020

I'm testing player_attack, which uses world 3, which has p_fist
p_fist has ?WEAPON_HANDLERS, which has gerlshmud_handler_attack
gerlshmud_handler_attack responds to resource allocation and kicks off: {Character, calc, Hit, on, Target, with, self()}
However, gerlshmud_handler_attack is listening for success on:{Character, calc, Types, hit, Hit, on, Target, with, Self}
So, "..., Types, hit, ..." is either missing from the message sent out when the resources are allocated, or I'm not supposed to expect types on the hit success.
I don't think I'm supposed to have "Types" (plural) at all. I _think_ I was working on having an attack kick off effects, and one of effects handled a melee hit.


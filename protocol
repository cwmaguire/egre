
src/handlers/gerlshmud_handler_attack_resource.erl
attempt({#parents{character = Character, owner = Owner}, Props, {Character, attack, Target, with, Owner}}) ->
attempt({#parents{character = Character}, Props, {move, Character, From, To, Exit}}) ->
attempt({#parents{character = Character}, Props, {die, Character}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Character, attack, Target, with, Owner}}) ->
succeed({Props, {Character, move, From, To, Exit}}) ->
succeed({Props, {die, Character}}) ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(self(), {Character, reserve, Amount, 'of', Resource, for, Owner}).
 gerlshmud_object:attempt(self(), {Character, unreserve, Resource, for, Owner}).

src/handlers/gerlshmud_handler_attribute_attack.erl
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Character, calc, Hit, on, Target, with, Item}}) ->
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Character, damage, Damage, to, Target, with, Item}}) ->
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Attacker, calc, Hit, on, Character, with, Item}}) ->
attempt({#parents{character = Character, top_item = TopItem = #top_item{item = Item}}, Props, {Target, damage, Damage, to, Character, with, Item}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Hit, on, Character, with, Item}}) ->
attempt({#parents{character = Character}, Props, {Attacker, damage, Damage, to, Character, with, Item}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_attribute_look.erl
attempt({#parents{owner = Owner}, Props, {Source, describe, Owner, with, Context}}) ->
attempt(_) ->
succeed({Props, {Source, describe, Self, with, Context}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, _Msg}) ->
 gerlshmud_object:attempt(Source, {Source, describe, self(), with, NewContext}).
 gerlshmud_object:attempt(Source, {send, Source, [<<Context/binary>>, Description]}).

src/handlers/gerlshmud_handler_body_part_inject_self.erl
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, BodyPartName}}) when is_binary(BodyPartName) ->
NewMessage = {Item, move, from, Owner, to, self()},
attempt({#parents{owner = Owner}, Props, {Item, move, from, BodyPartName, to, Owner}}) when is_pid(Item) andalso is_binary(BodyPartName) ->
NewMessage = {Item, move, from, self(), to, Owner},
attempt({#parents{owner = Owner}, Props, {Item, move, from, current_body_part, to, Owner}}) ->
NewMessage = {Item, move, from, self(), to, Owner},
attempt(_) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_body_part_inv.erl
attempt({#parents{owner = Owner}, Props, {Item, move, from, Self, to, Owner}}) when Self == self(), is_pid(Item) ->
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, Self}}) when Self == self(), is_pid(Item) ->
NewMessage = {Item, move, from, Owner, to, self(), limited, to, item_body_parts},
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, Self, limited, to, ItemBodyParts}}) when Self == self(), is_pid(Item), is_list(ItemBodyParts) ->
NewMessage = {Item, move, from, Owner, to, self(), on, body_part, type, BodyPartType},
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, first_available_body_part}}) when is_pid(Item) ->
NewMessage = {Item, move, from, Owner, to, first_available_body_part, limited, to, item_body_parts},
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, first_available_body_part, limited, to, ItemBodyParts}}) when is_pid(Item), is_list(ItemBodyParts) ->
NewMessage = {Item, move, from, Owner, to, self(), on, body_part, type, BodyPartType},
attempt({#parents{owner = Owner}, Props, {Item, move, from, Owner, to, Self, on, body_part, type, BodyPartType}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Item, move, from, OldOwner, to, Self, on, body_part, type, BodyPartType}}) when Self == self() ->
 gerlshmud_object:attempt(Item, {self(), set_child_property, body_part,
succeed({Props, {Item, move, from, Self, to, NewOwner}}) when Self == self() ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Item, {Target,

src/handlers/gerlshmud_handler_body_part_look.erl
attempt({#parents{}, Props, {Source, describe, Self, with, Context}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {Source, describe, Owner, with, Context}}) ->
attempt(_) ->
succeed({Props, {Source, describe, Self, with, Context}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Source, {Source, describe, self(), with, NewContext});
 gerlshmud_object:attempt(Source, {send, Source, [<<Context/binary>>, Description]}).

src/handlers/gerlshmud_handler_char_attack.erl
attempt({#parents{}, Props, {Attacker, attack, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Self, attack, Target, with, AttackVector}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Self, attack, Target, with, AttackVector}}) ->
succeed({Props, {Attacker, attack, Self}}) ->
 gerlshmud_object:attempt(self(), {self(), counter_attack, Attacker})
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_char_enter_world.erl
attempt({_Parents, Props, {Self, enter_world, in, room, with, Conn}}) when Self == self() ->
NewMessage = {Self, enter_world, in, Room, with, Conn},
attempt({_Parents, Props, {Self, enter_world, in, Room, with, _Conn}}) when Self == self(), is_pid(Room) ->
attempt(_) ->
succeed({Props, {Player, enter_world, in, Room, with, Conn}}) ->
succeed({Props, _Other}) ->

src/handlers/gerlshmud_handler_char_inject_self.erl
attempt({#parents{}, Props, {Source, Action, TargetName}}) when is_binary(TargetName) andalso (Action == look orelse Action == attack) ->
NewMessage = {Source, Action, self()},
attempt({Owner, Props, {Self, look}}) when Self == self() ->
NewMessage = {Self, look, Owner},
attempt(_) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_char_inv.erl
attempt({_Owner, Props, {Self, Action, Item}}) when Self == self() andalso is_pid(Item) andalso Action == get; Action == drop ->
attempt({_Owner, Props, {Item, move, from, Self, to, Room}}) when Self == self() andalso is_pid(Item), is_pid(Room) ->
attempt({_Owner, Props, {Item, move, from, Self, to, BodyPart, on, body_part, type, BodyPartType}}) when Self == self() andalso is_pid(Item), is_pid(BodyPart) ->
attempt({_Owner, Props, {Item, move, from, Room, to, Self}}) when Self == self() andalso is_pid(Item) ->
attempt(_) ->
succeed({Props, {Item, move, from, Source, to, Self}}) when Self == self() ->
 gerlshmud_object:attempt(Item, {self(), set_child_property, character, self()}),
succeed({Props, {Item, move, from, Self, to, BodyPart, on, body_part, type, BodyPartType}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, Target}}) when Self == self() ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Item, {Target, clear_child_property, character, 'if', self()}),

src/handlers/gerlshmud_handler_char_look.erl
attempt({#parents{}, Props, {Source, look, TargetName}}) when Source =/= self(), is_binary(TargetName) ->
NewMessage = {Source, look, self()},
attempt({#parents{owner = Room}, Props, _JustPlainLook = {SelfSource, look}}) when SelfSource == self() ->
NewMessage = {SelfSource, look, Room},
attempt({#parents{}, Props, {Source, look, Self}}) when Self == self() ->
attempt({#parents{owner = OwnerRoom}, Props, _DescFromParent = {Source, describe, OwnerRoom, with, RoomContext}}) ->
attempt(_) ->
succeed({Props, {Source, look, Self}}) when Self == self() ->
succeed({Props, {Source, describe, Target, with, Context}}) ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Source, {Source, describe, self(), with, NewContext}).
 gerlshmud_object:attempt(Source, {send, Source, [<<Context/binary>>, Description]}).

src/handlers/gerlshmud_handler_char_move.erl
attempt({#parents{}, Props, {Self, move, Direction}}) when Self == self() ->
attempt({#parents{}, Props, {Self, move, Dir, from, From}}) when Self == self() ->
attempt({#parents{}, Props, {Self, move, from, From, to, To, via, Exit}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Self, move, from, Source, to, Target, via, Exit}}) when Self == self() ->
 gerlshmud_object:attempt(self(), {self(), stop_attack});
succeed({Props, {Self, move, Direction, from, Source}}) when Self == self(), is_atom(Direction) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_cleanup.erl
attempt(_) ->
succeed({Props, {Self, cleanup, self}}) when Self == self() ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_conn_enter_world.erl
attempt({#parents{owner = Owner}, Props, {Owner, enter_world, in, Room, with, Self}}) when Self == self(), is_pid(Room) ->
attempt(_) ->
succeed({Props, {Player, enter_world, in, Room, with, Conn}}) ->
succeed({Props, _Other}) ->

src/handlers/gerlshmud_handler_conn_send.erl
attempt({#parents{owner = Owner}, Props, {send, Owner, Message}}) ->
attempt(_) ->
succeed({Props, {send, Player, Message}}) ->
succeed({Props, _Other}) ->

src/handlers/gerlshmud_handler_counterattack.erl
attempt({#parents{}, Props, {Attacker, attack, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Self, attack, Target}}) when Self == self() ->
attempt({#parents{}, _, _}) ->
succeed({Props, {Character, stop_attack}}) ->
succeed({Props, {Attacker, attack, Target}}) ->
 gerlshmud_object:attempt(self(), {self(), counter_attack, Attacker})
succeed({Props, {Self, counter_attack, Target}}) ->
 gerlshmud_object:attempt(self(), {self(), attack, Target}),
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_effect_attack.erl
attempt({_Parents, Props, {Self, affect, Target}}) when Self == self() ->
attempt({_Parents, Props, {_Character, calc, Types, affect, _Success, on, Target, with, Self}}) when Self == self() ->
attempt({_Parents, Props, {_Character, calc, Types, damage, _Damage, to, Target, with, Self}}) when Self == self() ->
attempt({_, _, _Msg}) ->
succeed({Props, {Self, affect, Target}}) ->
 gerlshmud_object:attempt(self(), Event),
succeed({Props, {Character, calc, Types, affect, Success, on, Target, with, Self}}) when is_pid(Target), Self == self(), Success > 0 ->
 gerlshmud_object:attempt(self(), Event),
succeed({Props, {Character, calc, Types, effect, Miss, on, Target, with, Self}}) when is_pid(Target), Self == self() ->
 gerlshmud_object:attempt(Character, {send, Character, <<"You missed!">>}),
succeed({Props, {Character, calc, Types, damage, Damage, to, Target, with, Self}}) when is_pid(Target), Self == self() ->
 gerlshmud_object:attempt(self(), DamageEvent),
 gerlshmud_object:attempt(Character, {send, Character, Msg}),
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_effect_create.erl
attempt({#parents{owner = Spell, character = Character}, Props, {Character, cast, Spell, at, Target}}) ->
attempt({#parents{owner = undefined}, Props, {Character, cast, Spell, at, Target}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Character, cast, Spell, at, Target}}) ->
 gerlshmud_object:attempt(Pid, {Pid, affect, Target}),
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_exit_look.erl
attempt({#parents{owner = Owner}, Props, {Source, describe, Room, with, Context}}) ->
attempt(_) ->
succeed({Props, {Source, describe, Room, with, Context}}) ->
succeed({Props, _Msg}) ->
 gerlshmud_object:attempt(Source, {send, Source, Desc}).

src/handlers/gerlshmud_handler_exit_move.erl
attempt({_Owner, Props, {Obj, move, Exit, from, Room}}) when is_atom(Exit) ->
attempt({_Owner, Props, {Mover, move, from, Source, to, Target, via, Self}}) when Self == self() ->
attempt(_) ->
succeed({Props, Msg}) ->

src/handlers/gerlshmud_handler_hitpoints_attack.erl
attempt({#parents{owner = Owner}, Props, {Character, does, Types, damage, Damage, to, Owner, with, AttackVector}}) ->
attempt(_) ->
succeed({Props, _Msg = {Attacker, does, Types, damage, Damage, to, Owner, with, AttackVector}}) ->
succeed({Props, _Msg}) ->
 gerlshmud_object:attempt(Owner, {Attacker, killed, Owner, with, AttackVector});

src/handlers/gerlshmud_handler_item_inject_self.erl
attempt({_Owner, Props, {Object, Action, ItemName}}) when is_binary(ItemName) andalso Action == get; Action == drop ->
NewMessage = {Object, Action, self()},
attempt({_Owner, Props, {ItemName, move, from, Source, to, Target}}) when is_binary(ItemName) ->
NewMessage = {self(), move, from, Source, to, Target},
attempt(_) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_item_inv.erl
attempt({#parents{owner = Owner}, Props, {Self, move, from, Owner, to, Target, limited, to, item_body_parts}}) when Self == self(), Owner /= Target ->
NewMessage = {Self, move, from, Owner, to, Target, limited, to, BodyParts},
attempt({#parents{owner = Owner}, Props, {Self, move, from, Owner, to, Target}}) when Self == self(), Owner /= Target, is_pid(Target) ->
attempt({#parents{owner = Owner}, Props, {Self, move, from, Owner, to, Target, on, body_part, type, _BodyPartType}}) when Self == self(), Owner /= Target, is_pid(Target) ->
attempt({#parents{}, Props, {Item, move, from, Self, to, Target}}) when Self == self(), is_pid(Item), is_pid(Target) ->
attempt(_) ->
succeed({Props, {Self, move, from, _OldOwner, to, NewOwner, on, body_part, type, BodyPartType}}) when Self == self() ->
succeed({Props, {Self, move, from, _OldOwner, to, NewOwner}}) when Self == self() ->
succeed({Props, {Item, move, from, Source, to, Self}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, Target}}) when Self == self() ->
succeed({Props, {Item, move, from, Self, to, Target, on, body_part, type, _BodyPartType}}) when Self == self() ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Child, {self(), set_child_properties, ChildProps}).
 gerlshmud_object:attempt(Item, Message),

src/handlers/gerlshmud_handler_item_look.erl
attempt({#parents{}, Props, Msg = {Source, look, TargetName}}) when Source =/= self(), is_binary(TargetName) ->
NewMessage = {Source, look, self()},
attempt({#parents{}, Props, {Source, look, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Source, describe, Self, with, Context}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {Source, describe, Owner, with, Context}}) ->
attempt(_) ->
succeed({Props, Msg = {Source, look, Self}}) when Self == self() ->
succeed({Props, Msg = {Source, describe, Target, with, Context}}) ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Source, {Source, describe, self(), with, NewContext});
 gerlshmud_object:attempt(Source, {send, Source, [<<Context/binary>>, Description]}).

src/handlers/gerlshmud_handler_life_attack.erl
attempt({#parents{owner = Owner}, Props, Msg = {Source, killed, Owner, with, _AttackVector}}) ->
attempt({#parents{owner = Owner}, Props, Msg = {Owner, die}}) ->
attempt({#parents{owner = Owner}, Props, Msg = {Attacker, calc, Hit, on, Owner, with, AttackVector}}) ->
attempt({#parents{owner = Owner}, Props, Msg = {Attacker, calc, Types, damage, Damage, to, Owner, with, AttackVector}}) ->
attempt(_) ->
succeed({Props, {Source, killed, Owner, with, AttackVector}}) ->
 gerlshmud_object:attempt(self(), {Owner, die}),
succeed({Props, {Owner, die}}) ->
succeed({Props, _Msg}) ->

src/handlers/gerlshmud_handler_resource_inject_self.erl
attempt({#parents{owner = Owner}, Props, {Owner, reserve, Amt, 'of', ResourceType, for, AttackVector}}) when is_atom(ResourceType) ->
NewMessage = {Owner, reserve, Amt, 'of', self(), for, AttackVector},
attempt({#parents{owner = Owner}, Props, {Owner, unreserve, ResourceType, for, AttackVector}}) when is_atom(ResourceType) ->
NewMessage = {Owner, unreserve, self(), for, AttackVector},
attempt(_) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_resource_reserve.erl
attempt({#parents{owner = Owner}, Props, {Owner, reserve, Amount, 'of', Self, for, Proc}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {Owner, unreserve, Self, for, Proc}}) when Self == self() ->
attempt({#parents{}, Props, {Self, update_tick}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Character, reserve, Amount, 'of', Self, for, Proc}}) when Self == self() ->
succeed({Props, {Character, unreserve, Self, for, Proc}}) when Self == self() ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Self, {Self, tick, Ref, with, PerTick}),

src/handlers/gerlshmud_handler_resource_tick.erl
attempt({#parents{}, Props, {Self, tick, Ref, with, Count}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Self, tick, Ref, with, Count}}) when Self == self() ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(Proc, {self(), allocate, Required, 'of', Type, to, Proc}),

src/handlers/gerlshmud_handler_room_inject_self.erl
NewMessage = {Char, enter_world, in, self(), with, Conn},
attempt(_) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_room_inv.erl
attempt({_Owner, Props, {Item, move, from, Source, to, Target}}) when Source == self(); Target == self() ->
attempt(_Attempt) ->
succeed({Props, {Item, move, from, Self, to, Target}}) when Self == self() ->
succeed({Props, {Item, move, from, Target, to, Self}}) when Self == self() ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_room_look.erl
attempt({_Owner, Props, {_Source, look, Self}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Player, look, Self}}) when Self == self() ->
NewMessage = {Player, describe, self(), with, RoomContext},
 gerlshmud_object:attempt(Player, NewMessage),
succeed({Props, _}) ->
 gerlshmud_object:attempt(Source, {send, Source, Description}).

src/handlers/gerlshmud_handler_room_move.erl
attempt({_Owner, Props, {Char, move, from, Source, to, Target, via, Exit}}) when Source == self(); Target == self() ->
attempt({_Owner, Props, {Char, enter_world, in, Self, with, Conn}}) when Self == self() ->
attempt(_) ->
succeed({Props, {Char, move, from, Self, to, Target, via, Exit}}) when Self == self() ->
succeed({Props, {Char, move, from, Source, to, Self, via, Exit}}) when Self == self() ->
 gerlshmud_object:attempt(Self, {Char, look, Self}),
succeed({Props, {Char, enter_world, in, Self, with, Conn}}) when Self == self() ->
 gerlshmud_object:attempt(Self, {Char, look, Self}),
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_set_child_property.erl
attempt({#parents{owner = Owner}, Props, {Owner, set_child_property, Key, Value}}) ->
NewMessage = {self(), set_child_property, Key, Value},
attempt({#parents{owner = Owner}, Props, {Owner, set_child_properties, ParentProps}}) ->
NewMessage = {self(), set_child_properties, ParentProps},
attempt({#parents{owner = Owner}, Props, {Owner, clear_child_property, Key = top_item, 'if', TopItem = #top_item{item = Item, ref = Ref}}}) ->
NewMessage = {self(), clear_child_property, top_item, 'if', TopItem},
attempt({#parents{owner = Owner}, Props, {Owner, clear_child_property, Key, 'if', Value}}) ->
NewMessage = {self(), clear_child_property, Key, 'if', Value},
attempt({_, Props, {_, set_child_property, _, _}}) ->
attempt(_) ->
succeed({Props, _Msg}) ->

src/handlers/gerlshmud_handler_spell_attack.erl
attempt({#parents{character = Character}, Props, {Attacker, attack, Target}}) when Attacker == Character ->
attempt({#parents{character = Character}, Props, {Character, counter_attack, Target}}) ->
attempt({#parents{character = Character}, Props, {Character, attack, Target, with, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Resource, allocate, Required, 'of', Type, to, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Attacker, killed, Target, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Character, stop_attack}}) ->
attempt({#parents{character = Character}, Props, {die, Character}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Attacker, killed, Target, with, AttackVector}}) ->
succeed({Props, {Attacker, attack, Target}}) when is_pid(Target) ->
 gerlshmud_object:attempt(self(), {Attacker, attack, Target, with, self()});
succeed({Props, {Attacker, counter_attack, Target}}) when is_pid(Target) ->
 gerlshmud_object:attempt(self(), {Attacker, attack, Target, with, self()});
 gerlshmud_object:attempt(Character, {Character, attack, Attacker});
succeed({Props, {Character, attack, Target, with, Self}}) ->
succeed({Props, {Resource, allocate, Amt, 'of', Type, to, Self}}) when Self == self() ->
succeed({Props, {Character, calc, Types, cast, Success, on, Target, with, Self}}) when is_pid(Target), Self == self(), Success > 0 ->
 gerlshmud_object:attempt(self(), {Effect, affect, Target}),
succeed({Props, {Character, calc, Types, cast, Miss, on, Target, with, Self}}) when is_pid(Target), Self == self() ->
succeed({Props, {Character, calc, Types, damage, Damage, to, Target, with, Self}}) when Self == self(), Damage > 0 ->
 gerlshmud_object:attempt(self(), {Character, does, Types, damage, Damage, to, Target, with, Self}),
succeed({Props, {Character, calc, Types, damage, NoDamage, to, Target, with, Self}}) when Self == self() ->
succeed({Props, {Character, stop_attack}}) ->
succeed({Props, {Character, die}}) ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(self(), Message).
 gerlshmud_object:attempt(self(), {Character, unreserve, Resource, for, self()}).
 gerlshmud_object:attempt(self(), {Character, reserve, Amount, 'of', Resource, for, self()}).

src/handlers/gerlshmud_handler_spell_inject_self.erl
attempt({#parents{character = Character}, Props, {Character, memorize, SpellName}}) when is_binary(SpellName) ->
NewMessage = {Character, memorize, self()},
attempt(_) ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_spell_memorize.erl
attempt({#parents{character = Character}, Props, {Character, memorize, Spell}}) when is_pid(Spell) ->
attempt({#parents{owner = undefined}, Props, {Character, cast, Spell, at, Target}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Character, memorize, Self}}) when Self == self() ->
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_stat_look.erl
attempt({#parents{owner = Owner}, Props, {Source, look, Owner, with, Context}}) ->
attempt(_) ->
succeed({Props, {Source, look, Target, with, Context}}) ->
succeed({Props, _Msg}) ->
 gerlshmud_object:attempt(Source, {send, Source, [<<Context/binary>>, Description]}).

src/handlers/gerlshmud_handler_subitem_attack.erl
attempt({#parents{top_item = TopItem}, Props, {Character, calc, Hit, on, Target, with, TopItem}}) ->
attempt({#parents{top_item = TopItem}, Props, {Character, damage, Damage, to, Target, with, TopItem}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Hit, on, Character, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Character, damage, Damage, to, Target, with, AttackVector}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Character, attack, Target}}) when is_pid(Target) ->
 gerlshmud_object:attempt(self(), {Character, attack, Target, with, self()}),
succeed({Props, _}) ->

src/handlers/gerlshmud_handler_test_connection_attack.erl
attempt({#parents{owner = Owner}, Props, _Msg = {killed, Attack, Source, Owner}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {die, Owner}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {Action, Attack, Owner, Target, _}}) when Action == calc_hit; Action == calc_damage ->
attempt({#parents{owner = Owner}, Props, _Msg = {Action, Attack, Attacker, Owner, _}}) when Action == calc_hit; Action == calc_damage ->
attempt({#parents{owner = Owner}, Props, _Msg = {calc_next_attack_wait, Attack, Attacker, Owner, _, _}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {calc_next_attack_wait, Attack, Owner, Target, _, _}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {attack, Attack, Attacker, Owner}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {attack, Attack, Owner, Target}}) ->
attempt({#parents{owner = Owner}, Props, Msg}) when Owner == element(2, Msg) ->
attempt({#parents{owner = Owner}, Props, {calc_hit, Attack, Attacker, Owner, _}}) ->
attempt(_) ->
succeed({Props, {killed, Attack, Source, Owner}}) ->
 gerlshmud_object:attempt(self(), {die, Owner}),
succeed({Props, {die, Target}}) ->
succeed({Props, _Msg}) ->

src/handlers/gerlshmud_handler_vector_attack.erl
attempt({#parents{character = Character}, Props, {Character, attack, Target}}) ->
attempt({#parents{character = Character}, Props, {Character, counter_attack, Target}}) ->
attempt({#parents{character = Character}, Props, {Character, attack, Target, with, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Resource, allocate, Required, 'of', Type, to, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Attacker, killed, Target, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Types, hit, Hit, on, Character, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Attacker, calc, Types, damage, Damage, to, Character, with, AttackVector}}) ->
attempt({#parents{character = Character}, Props, {Character, stop_attack}}) ->
attempt({#parents{character = Character}, Props, {die, Character}}) ->
attempt({_, _, _Msg}) ->
succeed({Props, {Attacker, killed, Target, with, AttackVector}}) ->
succeed({Props, {Attacker, attack, Target}}) when is_pid(Target) ->
 gerlshmud_object:attempt(self(), {Attacker, attack, Target, with, self()});
 %gerlshmud_object:attempt(Character, {Character, attack, Attacker});
succeed({Props, {Attacker, counter_attack, Target}}) when is_pid(Target) ->
 gerlshmud_object:attempt(self(), {Attacker, attack, Target, with, self()});
 gerlshmud_object:attempt(Character, {Character, attack, Attacker});
succeed({Props, {Character, attack, Target, with, Self}}) ->
succeed({Props, {Resource, allocate, Amt, 'of', Type, to, Self}}) when Self == self() ->
succeed({Props, {Character, calc, Types, hit, Hit, on, Target, with, Self}}) when is_pid(Target), Self == self(), Hit > 0 ->
 gerlshmud_object:attempt(self(), {Character, calc, Types, damage, Damage, to, Target, with, Self}),
succeed({Props, {Character, calc, Types, hit, Miss, on, Target, with, Self}}) when is_pid(Target), Self == self() ->
succeed({Props, {Character, calc, Types, damage, Damage, to, Target, with, Self}}) when Self == self(), Damage > 0 ->
 gerlshmud_object:attempt(self(), {Character, does, Types, damage, Damage, to, Target, with, Self}),
succeed({Props, {Character, calc, Types, damage, NoDamage, to, Target, with, Self}}) when Self == self() ->
succeed({Props, {Character, stop_attack}}) ->
succeed({Props, {Character, die}}) ->
succeed({Props, _}) ->
 gerlshmud_object:attempt(self(), Message).
 gerlshmud_object:attempt(self(), {Character, unreserve, Resource, for, self()}).
 gerlshmud_object:attempt(self(), {Character, reserve, Amount, 'of', Resource, for, self()}).

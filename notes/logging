Logging

October 20, 2020

I got my graph working where log messages move around the graph.

May 5, 2020

I _FINALLY_ got a web page done that creates a graph and spreads out the vertices so that that edges don’t overlap each other. I still need to:Create a list of handlers and their siblings from the logsanimate log messages moving through the graph

February 4, 2019

I did get some logging with parse transforms working but I ditched it as it wasn’t any less work than just coding a log message by hand. Now I’m usually passing back log properties from attempt/succeed/fail handlers to erlmud_object; erlmud_object fills in the standard properties and sends the log message. I’ve got a new log web page now that handles JSON log messages and applies a bunch of CSS and a little JavaScript to make the logs easier to parse visually.

January 10, 2019

I don’t know exactly how yet, but I could use parse transforms to automatically log parts of an event. What would be nice is if I could have an expressive name for a component of an event but use a general name for the logging.attempt(_Parents, Props, {src_Attacker, t_attacks, target_Owner, with, AttackVector}) ->… and then the parse transform would turn this into:attempt(_Parents, Props, {Source = {source, Attacker}, Type = {type, attacks}, Target = {target, Owner}, AttackVectorProp = {attack_vector, AttackVector}) -> Log = [Source, Type, Target, AttackVectorProp];
src_X -> Source = {source, X}t_attacks -> Type = {type, attacks}target_Owner -> Target = {target, Owner}AttackVector -> AttackVectorProps = {attack_vector, AttackVector} where “AttackVector” is a recognized, log-able property that doesn’t need an atomic prefix
I don’t really need to have the logging tuples bound to legible variables, which means I don’t need to have {attack_vector, AttackVector} bound to the clumsy AttackVectorProp. I could just use A, B, C, etc.
attempt(_Parents, Props, {A = {source, Attacker}, B = {type, attacks}, C = {target, Owner}, D = {attack_vector, AttackVector}) -> Log = [A, B, C, D]; // or even P1, P2, P3, P4
I could experiment with different combinations of marker and variable name:Attacker_src,src_Attacker,source_Attacker,Attacker_source,Attacker_sOwner_tgtSOURCE_AttackerAttacker_SOURCEAttacker_SAttacker_SRC… Or, I could just have reserved words like “Attacker” be turned into P1 = {source, Attacker} … but then what would “Owner” be turned into? Oh! I could have message pattern matching IN MY PARSE TRANSFORM!But, yikes, then I have to make sure my event handler pattern match matches up with my parse transform pattern match. No thanks.
Another idea: have a pattern in the pattern that specifies the pattern:attempt(Parents, Props, {a_a_t_w_v, Attacker, attacks, Owner, with, AttackVector} ->Where s_a_t_w_v = {source, Attacker}, {type, Attacks}, {target, Owner}, with, {vector, AttackVector}So instead of linking the log field name to each variable I’m specifying them all in one stringI could also put that log string in a macro:attempt(Parents, Props, {?ATTACK1, Attacker, attacks, Owner, with, AttackVector} ->… but that’s not very expressive
Just brainstorming:attempt(..., {?SRC(Attacker), ?TYPE(attacks), ?TARGET(Owner), with, ?VECTOR(AttackVector)} ->That … seems appealing but doesn’t read well. I really want the event to read like English.
Parse transforms can’t read commentsI wonder if a parse transform can read a -spec line? !!!! <——
Here’s how they work:-spec Module:Function(ArgType1, …, ArgTypeN) -> ReturnType
Example:-spec attempt(source(), type(), target(), atom(), vector()) attempt(…, {Attacker, attacks, Owner, with, AttackVector}) ->… then the parse transform infers the log types of the message pattern from the spec
but the -specs all have to stack at the front of the function

January 9, 2019

I’m a little over half-way through switching over the JSON for logging and there’s a few things I’d like to go back and re-do:
log stage: attempt / succeed / fail{resend, NewMessage}{message, Message}{props, Props}{sub, true / else} // anything not true doesn’t match the pattern{sub_type, look} // in case of inject_selfxxx {self, Self} Nah, lacks context. Object is more self-explanatory
Hmm, I _could_ formalize the log message and then have an “additional” field for extra info … but that didn’t turn out so well at Voalte; additional just ended up being a grab bag.
D’OH! Why do I keep logging the same things when I can just pass back any handler specific props and add them to the standard log properties?
lol, apparently I already had the idea of logging events in erlmud_object but I didn’t have the idea of adding on custom properties to log.
Now all I’m really doing with the custom log properties is tagging the fields in the message.e.g. {type, move}, {to, RoomToMoveTo}, etc.
Surely I can automate this. … but DON’T OVER-ENGINEER! Remember YAGNI!Also, it’s too early yet to see a pattern.
I talked this over in Slack:
My custom logging fields really seem like they should be automatedattempt({Character, describe, Owner, with, Context})^ That’s pretty readable, which was my goal, but then I have to do:Log = [{source, Character}, {type, describe}, {target, Owner}, {context, Context}]There’s gotta be a way I can have expressive messages {Foo, do, something, to, Bar, with, Baz} while also automatically logging standard things like source, target, etc.I was thinking maybe macros, but I haven’t solved that yet:attempt({?SOURCE, ?TYPE(describe), ?TARGET, with, ?CONTEXT})Needs more thought. Maybe by the time I’ve gone through all the event handlers again I’ll have thought of something.The other thing I could do is bind on the fields:attempt({Source = {source, Character}, ...})But’s gonna get really hard to read.I guess I could do some really hairy macros:attempt(?CHARACTER_DESCRIBE_TARGET_WITH_CONTEXT)That might not be too bad.(end of slack)^ attempt(?CHARACTER_DESCRIBE_TARGET_WITH_CONTEXT)… that actually doesn’t seem like a bad idea.That would do the binding and also, potentially, fill in the Log variable.Or even?CHARACTER_DESCRIBE_TARGET_WITH_CONTEXTwhich would expand to:attempt({Source = {source, Character}, …) -> Log = [Source, …]

January 8, 2019

Okay, I ended up building some HTML logging that really helped. You could show or hide process properties and the time. It was super useful. However, I need more flexibility in my logging consumers: I want to consume logs live while I’m play-testing but also look at a fixed set of logs after I run the tests. For live logs I’d like to hook up a web socket and stream in log events and display them in real time. I was going to just write them to a file but it’s _SO_ _HARD_ to read and try and follow what’s going on.
(Just thinking, I could store the log messages in a DB … but that doesn’t seem wise. I don’t want to have to have logs for the logging system when logging has issues. Logging to file is a simple, stable option.)
My plan, which I’m currently implementing, is to log everything as JSON so that the consumers get some structure instead of just a blob of text.
If I have JSON then in a web page I could format the message according to the different elements and values in the message using: text properties - color, size, font, decoration, weight, spacing borders - color, thickness, style, padding visibility hover icons i.e. have different icons for succeed, fail, resend Each process could have an icon that represents it, either from a set or generated Could generate a unique icon (or alphanumeric colored ID, e.g. “J1”) using the pid indentation arrows (?)
Here’s a sample I whipped up showing some of the possibilities
lol, my logging is going to start looking like fancy MUD game output!
I could animate a graph with messages travelling from one node to the other. If I persist each message on the graph at each moment then I can see which one is movingat the current time. i.e. when I step through the logs only one message will be doing anythingat a time. I’d need to know where a message came from so I could animate it travelling from where it was (because the message might changed, or there might be two of the same message).A hover element could give the details of a message but the animation could just show an icon oran ID or something.
Here are some notes I jotted down about how I could display logs in, for example, a web page:

July 18, 2015

I can only pick one class per tag. How can I hide any group of log lines by either stage, module or event? - use multiple spans, which are inline, each with a class

July 16, 2015

I'd like to try out some logging ideas:
- HTML, CSS, JavaScript - show/hide based on message type - colour code based on message type, arguments - indent different messages - have a column for times - have a column for message count - have a column for various other counts or states (e.g. num of processes) - basically just lots of formatting options
- Register all objects using a generated name - Look up processes at log time and log their registered name
- I could log a ton of extra stuff, basically everything, if I could hide it in the log page: - object properties - times - counts
- Basically, I want to create a view of the system at any given time. - Record the world and play it back. - object graphs would be cool: show objects blinking in and out of existence, show their properties changing.
- I could store the properties of _EVERY_ object when something is logged that way I have a snapshot of the entire graph at each moment.
- I could show which objects are currently sending which messages.
What do I need to debug this? I need to know _everything_, but I need to be able to limit it. Lines will be divs Columns will be spans .. nah, won’t line up Oh, they will if I set their “left” property manually
Each stage (attempt, succeed, fail), action and perhaps pid will have it’s own colour. e.g. attempt is blue, succeed is green, fail is red. Maybe some combination of shading and border.
Eventually I could add icons if it would help: a stickman for a character, a sword for a sword, arrow for movement, etc.
Line 1: Count, Millis, FromPid, FromName, ToPid, ToName, Stage, Action Line 2: Params (names looked up from index) Line 3: Props (names looked up from index) Line 4: Room from #procs (name looked up from index) Line 5: Next (names looked up from index) Line 6: Done (names looked up from index) Line 7: Subs (names looked up from index)
A show/hide checkbox will allow hiding of every column in line 1 as well as each line individually. A show/hide checkbox will allow hiding or showing messages from or to each pid.
A show/hide checkbox will allow hiding each stage: attempt, succeed, fail
A show/hide checkbox will allow hiding messages from each log level individually. This is for events that are within a module and don’t involve sending a message: debug info warning critical Each log level will have it’s own coloured and outlined box
Example: (not in lines, just example values)
45 // count 574 // millis <0.30.0>, character_pete_<0.30.0>, <0.53.0>, room_<0.53.0>, [{item, sword_<0.30.0>}, {body_part, hand_of_pete}, …] attempt, move, character_pete_<0.30.0>, room_<0.64.0>, e // pids looked up, other params raw room_<0.53.0>, // room in #procs [item_sword_<0.30.0>, body_part_head_<0.32.0>, exit_n_s_<0.45.0>] // done […] // next […] // subs
Gut check: what problem am I trying to solve?
When I’m reading through the logs I’m usually looking for a particular flow. e.g. what were all the messages to object X or what attempts were there. This will allow me to narrow the vast amount of data down. I can also format things so I can quickly find what I’m looking for.

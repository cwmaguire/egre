cmaguire-mbp.local 516 ~/dev/erlmud [master]
$for f in src/erlmud_handler_* ; do echo -e "\n$f" ; cat $f | tr -d "\r" | egrep 'attempt\(.{2,}\).*?->'; done


src/erlmud_handler_attack_resource.erl
attempt({_, _, _Msg}) ->

src/erlmud_handler_attribute_attack.erl
attempt({_, _, _Msg}) ->

src/erlmud_handler_attribute_look.erl

src/erlmud_handler_body_part_inject_self.erl

src/erlmud_handler_body_part_inv.erl

src/erlmud_handler_body_part_look.erl
attempt({#parents{}, Props, {_Source, describe, Self, with, _Context}}) when Self == self() ->
attempt({#parents{owner = Owner}, Props, {_Source, describe, Owner, with, _Context}}) ->

src/erlmud_handler_char_attack.erl
attempt({#parents{}, Props, {_Attacker, attack, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Self, attack, _Target, with, _AttackVector}}) when Self == self() ->

src/erlmud_handler_char_enter_world.erl

src/erlmud_handler_char_inject_self.erl
attempt({Owner, Props, {Self, look}}) when Self == self() ->

src/erlmud_handler_char_inv.erl

src/erlmud_handler_char_look.erl

src/erlmud_handler_char_move.erl
attempt({#parents{}, Props, {Self, move, Direction}}) when Self == self() ->
attempt({#parents{}, Props, {Self, move, _Dir, from, _From}}) when Self == self() ->
attempt({#parents{}, Props, {Self, move, from, _From, to, _To, via, _Exit}}) when Self == self() ->

src/erlmud_handler_cleanup.erl

src/erlmud_handler_conn_enter_world.erl

src/erlmud_handler_conn_send.erl
attempt({#parents{owner = Owner}, Props, {send, Owner, _Message}}) ->

src/erlmud_handler_counterattack.erl
attempt({#parents{}, Props, {_Attacker, attack, Self}}) when Self == self() ->
attempt({#parents{}, Props, {Self, attack, _Target}}) when Self == self() ->
attempt({#parents{}, _, _}) ->

src/erlmud_handler_exit_move.erl
attempt({_Owner, Props, {Obj, move, Exit, from, Room}}) when is_atom(Exit) ->
attempt({_Owner, Props, {Mover, move, from, Source, to, Target, via, Self}}) when Self == self() ->

src/erlmud_handler_hitpoints_attack.erl

src/erlmud_handler_item_attack.erl
attempt({#parents{character = Character}, Props, {Character, stop_attack}}) ->
attempt({_, _, _Msg}) ->

src/erlmud_handler_item_inject_self.erl

src/erlmud_handler_item_inv.erl

src/erlmud_handler_item_look.erl
attempt({#parents{}, Props, {_Source, look, Self}}) when Self == self() ->

src/erlmud_handler_life_attack.erl
attempt({#parents{owner = Owner}, Props, Msg = {_Source, killed, Owner, with, _AttackVector}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {Owner, die}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {_Attacker, calc, _Hit, on, Owner, with, _AttackVector}}) ->
attempt({#parents{owner = Owner}, Props, _Msg = {_Attacker, calc, _Damager, to, Owner, with, _AttackVector}}) ->

src/erlmud_handler_resource_inject_self.erl

src/erlmud_handler_resource_reserve.erl
attempt({#parents{}, Props, {Self, update_tick}}) when Self == self() ->

src/erlmud_handler_resource_tick.erl

src/erlmud_handler_room_inject_self.erl

src/erlmud_handler_room_inv.erl
attempt(_Attempt) ->

src/erlmud_handler_room_look.erl
attempt({_Owner, Props, {_Source, look, Self}}) when Self == self() ->

src/erlmud_handler_room_move.erl
attempt({_Owner, Props, {_Obj, move, from, Source, to, Target, via, _Exit}}) when Source == self(); Target == self() ->

src/erlmud_handler_set_child_property.erl
attempt({_, Props, {_, set_child_property, _, _}}) ->

src/erlmud_handler_spell_attack.erl
attempt({#parents{character = Character}, Props, {Character, attack, _Target}}) ->
attempt({#parents{}, Props, {_Character, does, _Damage, to, Target, with, Self}}) when Self == self(), is_pid(Target) ->
attempt({#parents{character = Character}, Props, {Character, stop_attacking, _Target}}) ->

src/erlmud_handler_stat_look.erl

src/erlmud_handler_subitem_attack.erl
attempt({_, _, _Msg}) ->

src/erlmud_handler_test_connection_attack.erl

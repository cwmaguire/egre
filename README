Erlang MUD where everything is a process

Doors, swords, goblins, rings, rooms, everything
that is an object that can be interacted with
will be a process. Everything will broadcast messages
to everything else. Processes will ignore anything they're
not interested in. Every process that is interested in receiving
the result of a message can add itself to the message. Even a
description can be a process, especially if it generates parts
of the description on the fly: time, weather, light level, etc.

erlmud_object handles all the "networking": chaining all the
processes together and passing the message allong the chain
until:
- A fail message is returned
- The chain ends
- The message is changed and the chain restarted

I'm not sure what I'll do for objects with custom logic:
- pluggable event handlers?
- custom modules for specific rooms? (e.g. erlmud_room23)

Updates:
Jan 27, 2015 - propagated first succeed message back to a subscribers
Jan 29, 2015 - move player between two rooms via an exit
Jan 31, 2015 - move player between two rooms with a direction

How to run it:
make && make rel && _rel/erlmud_release/bin/erlmud_release console
> erlmud_world:init(). %% Loads the world
> erlmud_world:m(s).   %% Move player1 south
> erlmud_world:s().    %% Get the state of all the objects

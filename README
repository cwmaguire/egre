Erlang MUD where everything is a process

Doors, swords, goblins, rings, rooms, everything that is an
object that can be interacted with is a process. Everything
broadcasts messages to surrounding objects. Processes ignore
anything they're not interested in. Every process that is
interested in receiving the result of a message adds itself to
the message as a subscriber. Even a description can be a process,
especially if it generates parts of the description on the fly:
time, weather, light level, etc.

The erlmud_object behaviour handles all the "networking": chaining
all the processes together and passing the message allong the chain
until:
- A fail message is returned
- The chain ends
- The message is changed and the chain restarted

Videos:
Jun 20, 2015 - How attacks work: https://youtu.be/oSG1EXPMJVw
Jun 20, 2015 - How messages work: https://youtu.be/6t7YSnSBaJ8

Updates:
Jan 27, 2015 - propagated first succeed message back to a subscribers
Jan 29, 2015 - move player between two rooms via an exit
Jan 31, 2015 - move player between two rooms with a direction
Feb 20, 2015 - web interface and login process
Jun 20, 2015 - attacks, logging
Jun 24, 2015 - wielding/wearing items on body parts

How to run it:
(I haven't been running this lately, just running tests)
make && make rel && _rel/erlmud_release/bin/erlmud_release console
> erlmud_world:init(). %% Loads the world
> erlmud_world:m(s).   %% Move player1 south
> erlmud_world:s().    %% Get the pid and state of all the objects
> erlmud_world:t().    %% Trace erlmud_object and erlmud_exit
> open http://localhost:8080/websocket.html in a browser
> in the browser enter any text for the login
> in the browser enter any text for the password

Running Tests:
make ct
-or-
rm -rf logs/*<hostname>*; rm -rf logs/erlmud.log; ERLMUD_LOG_PATH=$(pwd)/logs make ct
